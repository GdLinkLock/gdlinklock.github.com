1
00:00:00,000 --> 00:00:03,419
hi my name is Nicholas gray I work at a

2
00:00:03,419 --> 00:00:06,270
company called our machinery and in this

3
00:00:06,270 --> 00:00:08,519
talk I'm gonna talk about tools

4
00:00:08,519 --> 00:00:10,679
development and more specifically what

5
00:00:10,679 --> 00:00:13,440
we've done to speed up tools development

6
00:00:13,440 --> 00:00:16,890
and make it faster and make our tools

7
00:00:16,890 --> 00:00:18,050
better than before

8
00:00:18,050 --> 00:00:22,439
I have long history of writing game

9
00:00:22,439 --> 00:00:25,680
engines most well-known is probably the

10
00:00:25,680 --> 00:00:27,689
bit squid and stingray game onion which

11
00:00:27,689 --> 00:00:29,510
is actually the same onion it got

12
00:00:29,510 --> 00:00:34,980
rebranded when autodesk bought it in the

13
00:00:34,980 --> 00:00:36,239
last few years i've been working on a

14
00:00:36,239 --> 00:00:42,260
new game engine called the machinery and

15
00:00:42,260 --> 00:00:45,420
been trying to fix all the mistakes of

16
00:00:45,420 --> 00:00:48,690
the past game engines that i made so in

17
00:00:48,690 --> 00:00:51,120
this talk I'm gonna be talking a little

18
00:00:51,120 --> 00:00:55,440
bit about the history we've had with bit

19
00:00:55,440 --> 00:00:59,010
squid and sting ray our troubles with

20
00:00:59,010 --> 00:01:02,539
tools why it's been so hard for us and

21
00:01:02,539 --> 00:01:06,060
what we can possibly do about it and how

22
00:01:06,060 --> 00:01:08,460
we attempted to fix it when writing the

23
00:01:08,460 --> 00:01:11,610
machinery so first I'll start with a

24
00:01:11,610 --> 00:01:15,270
brief history of our failures as when it

25
00:01:15,270 --> 00:01:18,900
comes to tools the first words in a bit

26
00:01:18,900 --> 00:01:21,720
squid our first idea about tools who

27
00:01:21,720 --> 00:01:25,460
said we shouldn't write any tools at all

28
00:01:25,460 --> 00:01:27,990
rather we should just expose sort of

29
00:01:27,990 --> 00:01:30,750
public file formats like JSON files and

30
00:01:30,750 --> 00:01:32,700
our users could just write their own

31
00:01:32,700 --> 00:01:34,799
tools as long as they outputted this

32
00:01:34,799 --> 00:01:36,780
file format they would work together

33
00:01:36,780 --> 00:01:38,340
with our runtime and everything would be

34
00:01:38,340 --> 00:01:41,430
fine it turns out this wasn't really

35
00:01:41,430 --> 00:01:44,549
that great idea users actually do not

36
00:01:44,549 --> 00:01:47,630
want to write all the tools themselves

37
00:01:47,630 --> 00:01:49,950
you would think we would have figured

38
00:01:49,950 --> 00:01:52,409
that out before starting this game

39
00:01:52,409 --> 00:01:55,110
engine but we didn't really so we

40
00:01:55,110 --> 00:01:57,719
quickly had to scramble and and address

41
00:01:57,719 --> 00:02:00,060
this in some way so our first approach

42
00:02:00,060 --> 00:02:02,250
was just well let's hack together

43
00:02:02,250 --> 00:02:06,200
something quickly in WinForms this

44
00:02:06,200 --> 00:02:09,509
actually is a pretty speedy way to build

45
00:02:09,509 --> 00:02:11,730
tools you can just put in whatever check

46
00:02:11,730 --> 00:02:13,370
boxes and buttons

47
00:02:13,370 --> 00:02:17,239
and dialog boxes that you need but it's

48
00:02:17,239 --> 00:02:19,370
to be honest it looks kind of ugly like

49
00:02:19,370 --> 00:02:21,500
it's not it's not the nicest looks and

50
00:02:21,500 --> 00:02:24,379
it's also turned out pretty messy we

51
00:02:24,379 --> 00:02:27,349
didn't start with a clear plan of how

52
00:02:27,349 --> 00:02:29,150
things should work in the tools and how

53
00:02:29,150 --> 00:02:31,730
different tools should interact how

54
00:02:31,730 --> 00:02:34,459
things like copy paste and undo and redo

55
00:02:34,459 --> 00:02:36,769
and and drag and drop and stuff like

56
00:02:36,769 --> 00:02:41,000
that was supposed to work so overtime it

57
00:02:41,000 --> 00:02:43,819
got kind of hard to maintain and and it

58
00:02:43,819 --> 00:02:45,950
got kind of messy but but to be honest

59
00:02:45,950 --> 00:02:48,079
it worked pretty well and it's a fast

60
00:02:48,079 --> 00:02:50,900
and nice way to build tools but we need

61
00:02:50,900 --> 00:02:52,670
we thought we needed to do something

62
00:02:52,670 --> 00:02:55,579
better so for sort of the next iteration

63
00:02:55,579 --> 00:02:58,819
of tools for the bit squid onion we

64
00:02:58,819 --> 00:03:03,200
decided to go with WPF instead the

65
00:03:03,200 --> 00:03:05,450
reason we made this decision was like

66
00:03:05,450 --> 00:03:07,879
that was sort of the recommended UI

67
00:03:07,879 --> 00:03:11,690
toolkit from from Windows at that point

68
00:03:11,690 --> 00:03:14,900
I think it still is but I'm not 100%

69
00:03:14,900 --> 00:03:15,530
sure

70
00:03:15,530 --> 00:03:19,940
and using WP effort or tools suddenly

71
00:03:19,940 --> 00:03:25,040
looked a lot better a lot prettier but a

72
00:03:25,040 --> 00:03:27,230
result of switching to two WPF in' and

73
00:03:27,230 --> 00:03:29,359
moving away from this sort of hacky

74
00:03:29,359 --> 00:03:30,799
approach we'd had before was that the

75
00:03:30,799 --> 00:03:32,750
tools actually took a lot longer to

76
00:03:32,750 --> 00:03:37,090
write was also a higher barrier of entry

77
00:03:37,090 --> 00:03:39,500
WinForms is pretty simple to hack

78
00:03:39,500 --> 00:03:41,450
together a tools pretty straightforward

79
00:03:41,450 --> 00:03:45,230
but for to use WPF effectively you need

80
00:03:45,230 --> 00:03:47,419
to know c-sharp you need to know sort of

81
00:03:47,419 --> 00:03:50,389
the programming patterns of of c-sharp

82
00:03:50,389 --> 00:03:53,389
and query style programming and stuff

83
00:03:53,389 --> 00:03:56,060
like that you need to know WPF you need

84
00:03:56,060 --> 00:03:59,629
to know Sam oh and there's a lot of

85
00:03:59,629 --> 00:04:01,370
little subtleties that you need to know

86
00:04:01,370 --> 00:04:05,780
and as a result of the tools so our

87
00:04:05,780 --> 00:04:07,040
initial plan was we should rewrite

88
00:04:07,040 --> 00:04:08,810
everything which just take all our wind

89
00:04:08,810 --> 00:04:11,930
forms to convert them to WPF and things

90
00:04:11,930 --> 00:04:14,510
would be fine but this conversion

91
00:04:14,510 --> 00:04:16,970
actually took a lot longer than we

92
00:04:16,970 --> 00:04:19,820
expected I think yester unit editor took

93
00:04:19,820 --> 00:04:21,789
like six months or something to rewrite

94
00:04:21,789 --> 00:04:24,229
and as a result we never actually

95
00:04:24,229 --> 00:04:26,990
completed this rewrite so

96
00:04:26,990 --> 00:04:29,060
some of the tools you see here so this

97
00:04:29,060 --> 00:04:30,830
is sort of our launcher that launched

98
00:04:30,830 --> 00:04:32,990
all our different tools and some of

99
00:04:32,990 --> 00:04:35,090
these tools were rewritten to WPF and

100
00:04:35,090 --> 00:04:36,919
some were not and we sort of had this

101
00:04:36,919 --> 00:04:41,210
mix of tools built on top of different

102
00:04:41,210 --> 00:04:43,569
frameworks which is which is not great

103
00:04:43,569 --> 00:04:46,069
understand the cause for that was yes

104
00:04:46,069 --> 00:04:47,360
that it took so long to rewrite

105
00:04:47,360 --> 00:04:51,680
everything in in WPF then we got

106
00:04:51,680 --> 00:04:54,310
acquired by Autodesk and one of the

107
00:04:54,310 --> 00:04:57,080
requirements or wishes that all the rest

108
00:04:57,080 --> 00:04:59,690
CAD was for our editor to be platform

109
00:04:59,690 --> 00:05:02,360
independent and so that meant we

110
00:05:02,360 --> 00:05:05,690
couldn't use WPF I mean we could try to

111
00:05:05,690 --> 00:05:07,789
do something with mono but it didn't

112
00:05:07,789 --> 00:05:11,000
look very nice and promising to go down

113
00:05:11,000 --> 00:05:14,710
that route so we decided to go with

114
00:05:14,710 --> 00:05:18,880
web-based tools it seemed reasonable

115
00:05:18,880 --> 00:05:21,440
everything would be platform independent

116
00:05:21,440 --> 00:05:22,880
sort of by default it would be built on

117
00:05:22,880 --> 00:05:26,000
a web technology we also had the idea

118
00:05:26,000 --> 00:05:28,310
that we could buy by using web

119
00:05:28,310 --> 00:05:30,169
technology we could sort of reuse web

120
00:05:30,169 --> 00:05:31,820
expertise there's a lot of people out

121
00:05:31,820 --> 00:05:34,340
there who knows how to write you ice

122
00:05:34,340 --> 00:05:37,430
using HTML and CSS and it could be nice

123
00:05:37,430 --> 00:05:39,620
to use all of that and our tools would

124
00:05:39,620 --> 00:05:41,389
run in the browser too which is kind of

125
00:05:41,389 --> 00:05:45,680
nice but there were multiple drawbacks

126
00:05:45,680 --> 00:05:48,169
with this approach our tech stack which

127
00:05:48,169 --> 00:05:50,509
already was kind of complicated because

128
00:05:50,509 --> 00:05:53,840
we had an engine using C++ and then we

129
00:05:53,840 --> 00:05:54,830
have a scripting language for that

130
00:05:54,830 --> 00:05:57,289
engine which was Lua and then we had

131
00:05:57,289 --> 00:06:01,520
c-sharp to run our tools which targeted

132
00:06:01,520 --> 00:06:03,889
WinForms in WPF so that was already kind

133
00:06:03,889 --> 00:06:06,919
of complicated to this we now added

134
00:06:06,919 --> 00:06:11,330
chromium to run the web tools QT

135
00:06:11,330 --> 00:06:14,300
actually was used for the Windows system

136
00:06:14,300 --> 00:06:17,479
and some parts like that we had

137
00:06:17,479 --> 00:06:19,009
JavaScript of course because we need to

138
00:06:19,009 --> 00:06:21,560
program chromium somehow we also had

139
00:06:21,560 --> 00:06:24,319
some JavaScript toolkits I think we had

140
00:06:24,319 --> 00:06:26,240
a bunch of them angular was one but I

141
00:06:26,240 --> 00:06:28,969
think we had react there at some point

142
00:06:28,969 --> 00:06:32,810
and some other JavaScript toolkit too we

143
00:06:32,810 --> 00:06:34,130
had WebSockets to handle the

144
00:06:34,130 --> 00:06:35,779
communication between the engine and

145
00:06:35,779 --> 00:06:38,650
tool so it was a really deep heavy

146
00:06:38,650 --> 00:06:42,400
and as a result of that tools took even

147
00:06:42,400 --> 00:06:43,960
longer to rewrite because now there's

148
00:06:43,960 --> 00:06:47,320
all these all these components that we

149
00:06:47,320 --> 00:06:50,470
that we need to take care of and it

150
00:06:50,470 --> 00:06:52,000
ended up being that we never completed

151
00:06:52,000 --> 00:06:54,699
this rewrite either so not only did we

152
00:06:54,699 --> 00:06:57,400
not rewrite or win from students to WPF

153
00:06:57,400 --> 00:07:00,220
we didn't rewrite all WPF tools or all

154
00:07:00,220 --> 00:07:02,229
WinForms tools to the web platform

155
00:07:02,229 --> 00:07:05,560
either so at the end of sort of the

156
00:07:05,560 --> 00:07:08,139
Stingray area we had this mix where some

157
00:07:08,139 --> 00:07:09,639
tools were in WinForms some tools were

158
00:07:09,639 --> 00:07:11,620
still in WPF in some tools were in the

159
00:07:11,620 --> 00:07:15,070
web interface so even more complicated

160
00:07:15,070 --> 00:07:21,039
at that point so to be to be honest bit

161
00:07:21,039 --> 00:07:23,530
Sweden stingray never had good tools the

162
00:07:23,530 --> 00:07:28,570
tools were always suffering and as we

163
00:07:28,570 --> 00:07:30,970
started out with the machinery that was

164
00:07:30,970 --> 00:07:32,919
one of the problems with that we really

165
00:07:32,919 --> 00:07:35,289
wanted to fix because I think that every

166
00:07:35,289 --> 00:07:37,240
time you you start writing in you and

167
00:07:37,240 --> 00:07:39,039
Ian you try to want you you kind of want

168
00:07:39,039 --> 00:07:41,919
to like atone for the mistakes that you

169
00:07:41,919 --> 00:07:44,139
made in your last onion and find a way

170
00:07:44,139 --> 00:07:46,240
of addressing them and fixing them and

171
00:07:46,240 --> 00:07:48,190
that's sort of the drive to for for

172
00:07:48,190 --> 00:07:52,449
making a new engine so we an identify

173
00:07:52,449 --> 00:07:56,979
this as sort of a core problem so what

174
00:07:56,979 --> 00:07:58,900
were the big problems one problem of

175
00:07:58,900 --> 00:08:00,490
course is we keep kept changing the

176
00:08:00,490 --> 00:08:02,710
frameworks the underlying UI framework

177
00:08:02,710 --> 00:08:05,889
and that caused us lots of delays and

178
00:08:05,889 --> 00:08:08,800
and lots of extra work yeah but there is

179
00:08:08,800 --> 00:08:12,220
also so that cost made us lose a lot of

180
00:08:12,220 --> 00:08:14,229
time writing tools but there was another

181
00:08:14,229 --> 00:08:17,050
problem that tools just in general took

182
00:08:17,050 --> 00:08:19,870
too long to write I remember on on a

183
00:08:19,870 --> 00:08:21,970
number of occasions where I would add a

184
00:08:21,970 --> 00:08:24,520
feature to the onion and it would take

185
00:08:24,520 --> 00:08:28,300
me maybe four hours or a workday to add

186
00:08:28,300 --> 00:08:31,210
that feature to the onion and then to

187
00:08:31,210 --> 00:08:33,039
add tooling for that feature could be

188
00:08:33,039 --> 00:08:35,830
like a week or two week two weeks just

189
00:08:35,830 --> 00:08:39,070
to do the work it also need to be

190
00:08:39,070 --> 00:08:41,890
scheduled into the sort of pipeline for

191
00:08:41,890 --> 00:08:43,990
the tools programmers which means there

192
00:08:43,990 --> 00:08:45,610
could be a month or something before the

193
00:08:45,610 --> 00:08:48,190
before the UI was actually there and I

194
00:08:48,190 --> 00:08:50,230
always felt like there was like this

195
00:08:50,230 --> 00:08:52,390
weird disconnect here how

196
00:08:52,390 --> 00:08:55,420
that it was so much easier to add stuff

197
00:08:55,420 --> 00:08:58,089
to the runtime than to add stuff to the

198
00:08:58,089 --> 00:09:01,630
tools and it always felt like the tools

199
00:09:01,630 --> 00:09:04,149
were slowing us down and like holding us

200
00:09:04,149 --> 00:09:06,870
back from from writing in awesome engine

201
00:09:06,870 --> 00:09:11,110
so we need to fix that somehow a third

202
00:09:11,110 --> 00:09:13,060
problem that we also had with with the

203
00:09:13,060 --> 00:09:14,860
bit squid and stingrays especially as we

204
00:09:14,860 --> 00:09:16,810
got into the web technology was bad

205
00:09:16,810 --> 00:09:21,040
performance so I mean writing again

206
00:09:21,040 --> 00:09:22,660
game engine is all about performance

207
00:09:22,660 --> 00:09:25,029
it's all about how many characters how

208
00:09:25,029 --> 00:09:26,709
much animation and physics and so on

209
00:09:26,709 --> 00:09:29,529
rendering can you push and it's kind of

210
00:09:29,529 --> 00:09:31,870
sad if your editor doesn't reflect that

211
00:09:31,870 --> 00:09:34,060
so if you have really long startup for

212
00:09:34,060 --> 00:09:36,130
your editor or if it doesn't just feel

213
00:09:36,130 --> 00:09:39,399
snappy when you click on things it's not

214
00:09:39,399 --> 00:09:41,740
nice so we wanted to make sure that the

215
00:09:41,740 --> 00:09:43,329
performance of the tools match the

216
00:09:43,329 --> 00:09:45,190
performance of the onion so how do we

217
00:09:45,190 --> 00:09:47,680
fix this what what are the actual

218
00:09:47,680 --> 00:09:51,070
problems that we need to address so one

219
00:09:51,070 --> 00:09:54,579
of them changing frameworks so why does

220
00:09:54,579 --> 00:09:57,940
it happen to begin with sometimes I

221
00:09:57,940 --> 00:10:00,640
would say we're changing frameworks

222
00:10:00,640 --> 00:10:02,829
because we made an initial bad decision

223
00:10:02,829 --> 00:10:05,949
and using like platform specific

224
00:10:05,949 --> 00:10:08,470
technology like winforms WPF could have

225
00:10:08,470 --> 00:10:11,740
could be considered a bad decision maybe

226
00:10:11,740 --> 00:10:13,360
it would have been better to go with QT

227
00:10:13,360 --> 00:10:15,640
instead using web technology maybe that

228
00:10:15,640 --> 00:10:18,070
was a bad decision too but it's kind of

229
00:10:18,070 --> 00:10:21,310
hard to avoid all bad decisions you're

230
00:10:21,310 --> 00:10:23,680
probably likely at some point to make

231
00:10:23,680 --> 00:10:26,290
one or two bad decisions that will

232
00:10:26,290 --> 00:10:27,610
result in you having to change

233
00:10:27,610 --> 00:10:31,180
frameworks also even if you don't make

234
00:10:31,180 --> 00:10:33,850
any bad decisions yourself you sometimes

235
00:10:33,850 --> 00:10:35,680
get in a situation where technology that

236
00:10:35,680 --> 00:10:38,320
you've used and sort of depended on gets

237
00:10:38,320 --> 00:10:40,690
outdated or abandoned so there's a

238
00:10:40,690 --> 00:10:43,899
number of different technologies that

239
00:10:43,899 --> 00:10:47,050
that they get obsolete and they get put

240
00:10:47,050 --> 00:10:49,750
into like the legacy scrap pile so one

241
00:10:49,750 --> 00:10:51,190
of them that we used actually in

242
00:10:51,190 --> 00:10:53,290
stingray was the Native Client the

243
00:10:53,290 --> 00:10:56,860
Google Native Client and that cotton got

244
00:10:56,860 --> 00:10:59,680
abandoned or deprecated and then we need

245
00:10:59,680 --> 00:11:02,860
to find another way of handling that now

246
00:11:02,860 --> 00:11:04,690
in theory you

247
00:11:04,690 --> 00:11:06,490
if a piece of technology gets sort of

248
00:11:06,490 --> 00:11:08,529
abandoned you could keep running on it

249
00:11:08,529 --> 00:11:10,569
because you have the latest version of

250
00:11:10,569 --> 00:11:13,959
it and you probably can still use it but

251
00:11:13,959 --> 00:11:17,050
in practice that's kind of troublesome

252
00:11:17,050 --> 00:11:19,600
because it means that since it's not

253
00:11:19,600 --> 00:11:22,360
being maintained anymore by my the

254
00:11:22,360 --> 00:11:24,279
people who actually made the technology

255
00:11:24,279 --> 00:11:26,680
it means that you now have the full

256
00:11:26,680 --> 00:11:28,629
responsibility of maintaining this

257
00:11:28,629 --> 00:11:31,689
framework and that can be a big burden I

258
00:11:31,689 --> 00:11:34,439
mean say you have an engine with like

259
00:11:34,439 --> 00:11:37,660
$300,000 or 500,000 lines of code you

260
00:11:37,660 --> 00:11:40,089
have to maintain that but but suddenly

261
00:11:40,089 --> 00:11:41,980
you now also have to maintain like an

262
00:11:41,980 --> 00:11:43,689
old version of chromium because you want

263
00:11:43,689 --> 00:11:46,839
to keep Native Client and that's got

264
00:11:46,839 --> 00:11:48,490
like a million or a million a half lines

265
00:11:48,490 --> 00:11:50,350
of codes and do you really want to keep

266
00:11:50,350 --> 00:11:52,750
fixing bugs in that and and also missing

267
00:11:52,750 --> 00:11:55,360
out on on any new features that come

268
00:11:55,360 --> 00:11:58,209
into like the main branch of chromium so

269
00:11:58,209 --> 00:12:01,420
sometimes this just forces you to to

270
00:12:01,420 --> 00:12:03,670
change technology through through no

271
00:12:03,670 --> 00:12:05,829
fault of your own and the only way of

272
00:12:05,829 --> 00:12:08,740
sort of avoiding that is to be rest less

273
00:12:08,740 --> 00:12:11,290
reliant on these frameworks and be

274
00:12:11,290 --> 00:12:14,079
really careful about what frameworks you

275
00:12:14,079 --> 00:12:17,110
rely on and a durability of switching

276
00:12:17,110 --> 00:12:21,250
them out if necessary another question

277
00:12:21,250 --> 00:12:23,529
why did why did it take us so long to

278
00:12:23,529 --> 00:12:25,779
write tools compared to writing engine

279
00:12:25,779 --> 00:12:26,230
code

280
00:12:26,230 --> 00:12:29,130
well we identified a number of factors

281
00:12:29,130 --> 00:12:33,550
one is just like that every every little

282
00:12:33,550 --> 00:12:36,069
thing you add to your engine needs UI so

283
00:12:36,069 --> 00:12:38,560
you add a new parameter somewhere then

284
00:12:38,560 --> 00:12:40,569
it needs someone needs to design of a UI

285
00:12:40,569 --> 00:12:43,600
for that that piece it needs to be coded

286
00:12:43,600 --> 00:12:46,180
it needs to be tested and so on so every

287
00:12:46,180 --> 00:12:48,100
little every it's just a lot of work to

288
00:12:48,100 --> 00:12:51,459
do every little thing there's also a lot

289
00:12:51,459 --> 00:12:53,319
of features that you sort of expect in a

290
00:12:53,319 --> 00:12:55,300
modern UI things like undo redo

291
00:12:55,300 --> 00:12:58,209
unlimited undo redo you want copy and

292
00:12:58,209 --> 00:12:59,860
paste to work you want to drag and drop

293
00:12:59,860 --> 00:13:01,709
to work it needs to work with

294
00:13:01,709 --> 00:13:05,160
serialization and saving and loading and

295
00:13:05,160 --> 00:13:07,779
migrating of data and stuff like that

296
00:13:07,779 --> 00:13:10,540
and all of these all of these little

297
00:13:10,540 --> 00:13:13,269
things each each little thing takes time

298
00:13:13,269 --> 00:13:16,750
to add and it also adds to your the size

299
00:13:16,750 --> 00:13:18,290
of your code so every time you

300
00:13:18,290 --> 00:13:20,810
you you i box and then you had undo and

301
00:13:20,810 --> 00:13:23,209
copy/paste for that you add more code to

302
00:13:23,209 --> 00:13:26,240
your your project and generally the more

303
00:13:26,240 --> 00:13:28,130
code you have to lug around the less

304
00:13:28,130 --> 00:13:30,079
agile you can you become and the more

305
00:13:30,079 --> 00:13:32,839
slower everything becomes because you

306
00:13:32,839 --> 00:13:34,850
have to manage out all that code and if

307
00:13:34,850 --> 00:13:35,839
you want to make some kind of

308
00:13:35,839 --> 00:13:37,759
refactoring you have more code to

309
00:13:37,759 --> 00:13:39,800
refactor more code to debug in profile

310
00:13:39,800 --> 00:13:44,269
and so on another problem specifically

311
00:13:44,269 --> 00:13:47,750
with the way the stingray technology was

312
00:13:47,750 --> 00:13:49,730
built was that we have this deep tech

313
00:13:49,730 --> 00:13:52,490
stack and when you have a deep tech

314
00:13:52,490 --> 00:13:54,050
stack like that it's hard to understand

315
00:13:54,050 --> 00:13:57,170
where bugs are happening if you run into

316
00:13:57,170 --> 00:13:59,029
a bug you don't really know well this is

317
00:13:59,029 --> 00:14:01,160
this a bug in in angular is it in the

318
00:14:01,160 --> 00:14:03,529
JavaScript code is in the WebSocket it's

319
00:14:03,529 --> 00:14:06,110
an increment or C sharp or Lua or the

320
00:14:06,110 --> 00:14:08,300
C++ there's just so many different

321
00:14:08,300 --> 00:14:11,089
places to look so so the problem here is

322
00:14:11,089 --> 00:14:14,170
really one of complexity the more

323
00:14:14,170 --> 00:14:18,110
complexity you add to project the more

324
00:14:18,110 --> 00:14:20,420
work you have to do for everything like

325
00:14:20,420 --> 00:14:23,089
for finding bugs becomes more work and

326
00:14:23,089 --> 00:14:25,250
finding performance issues becomes more

327
00:14:25,250 --> 00:14:25,730
work

328
00:14:25,730 --> 00:14:27,529
refactoring becomes more work adding

329
00:14:27,529 --> 00:14:30,199
features becomes more work so complexity

330
00:14:30,199 --> 00:14:32,329
is really your your big enemy that's

331
00:14:32,329 --> 00:14:35,750
really what you want to minimize and

332
00:14:35,750 --> 00:14:38,209
having all these layers and all these

333
00:14:38,209 --> 00:14:40,069
components that are not really ours and

334
00:14:40,069 --> 00:14:42,079
that we don't control really adds to the

335
00:14:42,079 --> 00:14:44,569
complexity another problem with this

336
00:14:44,569 --> 00:14:47,779
complexity too was that since there were

337
00:14:47,779 --> 00:14:50,300
so many different components here only

338
00:14:50,300 --> 00:14:52,699
the tool people really had a good

339
00:14:52,699 --> 00:14:55,160
understanding of the tool stack and that

340
00:14:55,160 --> 00:14:57,620
means that if a rendering engineer for

341
00:14:57,620 --> 00:14:59,360
instance add a new feature to the

342
00:14:59,360 --> 00:15:01,790
renderer they couldn't just go in and

343
00:15:01,790 --> 00:15:04,220
add that feature to the UI because if

344
00:15:04,220 --> 00:15:07,610
you I was too complex for them to to do

345
00:15:07,610 --> 00:15:09,260
things like that quickly so the

346
00:15:09,260 --> 00:15:11,899
development got very siloed and you got

347
00:15:11,899 --> 00:15:14,000
the the tools team and the runtime team

348
00:15:14,000 --> 00:15:16,579
and they were completely separate which

349
00:15:16,579 --> 00:15:18,350
when you do stuff like that it often

350
00:15:18,350 --> 00:15:20,209
leads to friction between the teams and

351
00:15:20,209 --> 00:15:22,819
it also means that stuff that's

352
00:15:22,819 --> 00:15:25,279
important for one team like like a

353
00:15:25,279 --> 00:15:26,329
feature that's important to the

354
00:15:26,329 --> 00:15:28,550
rendering team might not be as important

355
00:15:28,550 --> 00:15:30,260
to the tools team so it ends up being

356
00:15:30,260 --> 00:15:31,850
queued on some

357
00:15:31,850 --> 00:15:34,490
you somewhere and you don't know

358
00:15:34,490 --> 00:15:36,380
actually when it's gonna be implemented

359
00:15:36,380 --> 00:15:38,000
and stuff like that and I just think

360
00:15:38,000 --> 00:15:40,940
things run a lot more efficient when

361
00:15:40,940 --> 00:15:43,100
everybody is sort of able to touch all

362
00:15:43,100 --> 00:15:45,529
the code so the rendering engineer can

363
00:15:45,529 --> 00:15:48,649
actually go in here and add it to the UI

364
00:15:48,649 --> 00:15:51,170
and then maybe some UI programmer needs

365
00:15:51,170 --> 00:15:52,910
to come in later and sort of pretty

366
00:15:52,910 --> 00:15:54,800
things up a little bit but at least the

367
00:15:54,800 --> 00:15:57,529
features there and and can be accessed

368
00:15:57,529 --> 00:16:01,040
so people don't constantly keep getting

369
00:16:01,040 --> 00:16:05,509
blocked by by other people third issue

370
00:16:05,509 --> 00:16:07,610
the performance problems why did that

371
00:16:07,610 --> 00:16:08,089
happen

372
00:16:08,089 --> 00:16:12,220
I think a big part of that is that

373
00:16:12,220 --> 00:16:14,959
standard web practices didn't always

374
00:16:14,959 --> 00:16:18,290
work so so the way when you have web

375
00:16:18,290 --> 00:16:20,389
programmers in they have their usual way

376
00:16:20,389 --> 00:16:23,240
of doing things and that doesn't always

377
00:16:23,240 --> 00:16:24,980
work when you're building a game editor

378
00:16:24,980 --> 00:16:28,790
because game development has way more

379
00:16:28,790 --> 00:16:32,569
stuff than your typical HTML application

380
00:16:32,569 --> 00:16:34,910
like like I said when when it comes to

381
00:16:34,910 --> 00:16:37,009
making game engines or games we always

382
00:16:37,009 --> 00:16:39,290
try to push performance as far as it

383
00:16:39,290 --> 00:16:42,230
will go and that means you're always

384
00:16:42,230 --> 00:16:44,240
sort of running it at the brink of what

385
00:16:44,240 --> 00:16:48,800
your computer is able to handle and if

386
00:16:48,800 --> 00:16:51,199
you do things like and and that this

387
00:16:51,199 --> 00:16:53,180
doesn't mean that you necessarily it's

388
00:16:53,180 --> 00:16:55,100
not possible to do this in the web

389
00:16:55,100 --> 00:16:58,250
browser web browser can do amazing

390
00:16:58,250 --> 00:17:00,889
things and if you write things the right

391
00:17:00,889 --> 00:17:04,459
way for the web browser it might work

392
00:17:04,459 --> 00:17:06,470
but if you write it sort of the regular

393
00:17:06,470 --> 00:17:08,900
the usual way of doing it it might not

394
00:17:08,900 --> 00:17:13,839
work so what would open happen is that

395
00:17:13,839 --> 00:17:16,189
some some of our UI programmers would

396
00:17:16,189 --> 00:17:19,669
create a tool and it would look pretty

397
00:17:19,669 --> 00:17:21,890
and it would run nice with like a

398
00:17:21,890 --> 00:17:25,010
hundred objects in it but then as soon

399
00:17:25,010 --> 00:17:26,990
as you put a thousand or 10,000 objects

400
00:17:26,990 --> 00:17:29,480
in it it would would like break down and

401
00:17:29,480 --> 00:17:32,960
run on it nice and fixing that was not

402
00:17:32,960 --> 00:17:36,429
just an issue of like finding little

403
00:17:36,429 --> 00:17:39,020
performance like profiling it and

404
00:17:39,020 --> 00:17:40,790
finding little performance hotspots it

405
00:17:40,790 --> 00:17:43,280
often required a complete rewrite of the

406
00:17:43,280 --> 00:17:44,280
system like

407
00:17:44,280 --> 00:17:48,000
and controls had to be virtualized data

408
00:17:48,000 --> 00:17:49,710
had to be stored in a completely

409
00:17:49,710 --> 00:17:52,130
different ways maybe we had to bypass

410
00:17:52,130 --> 00:17:54,990
some JavaScript framework because that

411
00:17:54,990 --> 00:17:56,460
framework wasn't didn't have a

412
00:17:56,460 --> 00:17:58,740
performance mindset so the rewrite hood

413
00:17:58,740 --> 00:18:02,340
was often the cost of the rewrite was

414
00:18:02,340 --> 00:18:04,350
similar to writing the system from

415
00:18:04,350 --> 00:18:08,790
scratch also the deep tech stack again

416
00:18:08,790 --> 00:18:10,350
complicates everything it also

417
00:18:10,350 --> 00:18:12,360
complicates finding these performance

418
00:18:12,360 --> 00:18:14,700
issues and the browser when it comes to

419
00:18:14,700 --> 00:18:16,230
performance issues and the browser it's

420
00:18:16,230 --> 00:18:19,380
more or less a black box you don't know

421
00:18:19,380 --> 00:18:21,780
oh I wrote my JavaScript code this way

422
00:18:21,780 --> 00:18:25,710
and it's end digit into this bad path so

423
00:18:25,710 --> 00:18:27,510
now everything runs ten times slower

424
00:18:27,510 --> 00:18:29,790
than before and these things can be

425
00:18:29,790 --> 00:18:31,350
really hard to know they can also change

426
00:18:31,350 --> 00:18:33,480
from worsen to version of the web

427
00:18:33,480 --> 00:18:36,480
browser so if you update chromium

428
00:18:36,480 --> 00:18:37,920
because you need access to some new

429
00:18:37,920 --> 00:18:40,650
features then suddenly you might have

430
00:18:40,650 --> 00:18:42,300
completely new performance problems and

431
00:18:42,300 --> 00:18:44,240
you need to investigate everything again

432
00:18:44,240 --> 00:18:47,150
which make this really tricky to keep

433
00:18:47,150 --> 00:18:50,360
keep a good control of the performance

434
00:18:50,360 --> 00:18:53,100
so how do we fix all these things all

435
00:18:53,100 --> 00:18:58,350
these problems well the thing with too

436
00:18:58,350 --> 00:19:01,380
much stuff to write our idea there was

437
00:19:01,380 --> 00:19:03,360
we can automate the lost little stuff so

438
00:19:03,360 --> 00:19:06,750
stuff like undo copy/paste and stuff

439
00:19:06,750 --> 00:19:09,480
like that if we define a standardized

440
00:19:09,480 --> 00:19:11,940
data model which is the way we represent

441
00:19:11,940 --> 00:19:14,730
the data in our application we can

442
00:19:14,730 --> 00:19:17,580
define a lot of these operations on that

443
00:19:17,580 --> 00:19:19,650
data model and that means that the UI

444
00:19:19,650 --> 00:19:22,620
doesn't really have to be bothered with

445
00:19:22,620 --> 00:19:25,410
it that much it doesn't have to do

446
00:19:25,410 --> 00:19:27,780
anything specific to do undo redo it can

447
00:19:27,780 --> 00:19:29,970
just talk to the data representation and

448
00:19:29,970 --> 00:19:32,340
say well undo this action and then the

449
00:19:32,340 --> 00:19:35,430
the data model can do it so that cuts

450
00:19:35,430 --> 00:19:37,410
down drastically the amount of work that

451
00:19:37,410 --> 00:19:41,340
needs to go into the UI step two what we

452
00:19:41,340 --> 00:19:44,220
did we really didn't like this deep text

453
00:19:44,220 --> 00:19:46,230
tag and all that complexity and the

454
00:19:46,230 --> 00:19:47,850
problems with changing frameworks that

455
00:19:47,850 --> 00:19:50,220
came with that so we decided to minimize

456
00:19:50,220 --> 00:19:52,920
the text I completely use as few

457
00:19:52,920 --> 00:19:55,710
frameworks as possible and also own as

458
00:19:55,710 --> 00:19:58,080
much of the text tag as possible so

459
00:19:58,080 --> 00:20:00,659
it's actually running on our code not

460
00:20:00,659 --> 00:20:02,640
everybody else codes that means we know

461
00:20:02,640 --> 00:20:04,830
the code we can debug it we can profile

462
00:20:04,830 --> 00:20:07,230
it and we can understand everything that

463
00:20:07,230 --> 00:20:09,059
goes on with it

464
00:20:09,059 --> 00:20:11,399
make things explicit so instead of these

465
00:20:11,399 --> 00:20:12,750
black boxes where you don't know what's

466
00:20:12,750 --> 00:20:14,909
happening you can actually see what's

467
00:20:14,909 --> 00:20:18,870
what's going on in there finally again

468
00:20:18,870 --> 00:20:22,380
to handle this sort of busy work instead

469
00:20:22,380 --> 00:20:25,169
of writing us for every little thing

470
00:20:25,169 --> 00:20:27,570
we try to as far as possible sort of

471
00:20:27,570 --> 00:20:30,049
auto-generate and all to populate the us

472
00:20:30,049 --> 00:20:34,710
from data and so for example a graph

473
00:20:34,710 --> 00:20:36,840
view or a tree view or a property view

474
00:20:36,840 --> 00:20:39,539
we try to reuse them from between

475
00:20:39,539 --> 00:20:41,970
different systems and just have them be

476
00:20:41,970 --> 00:20:44,580
generated from the data so that way as a

477
00:20:44,580 --> 00:20:46,049
programming you don't actually have to

478
00:20:46,049 --> 00:20:48,510
write the UI it's sort of created for

479
00:20:48,510 --> 00:20:50,419
you if you can use one of these

480
00:20:50,419 --> 00:20:53,940
standardized views and components so

481
00:20:53,940 --> 00:20:57,600
I'll explain all these parts as we go on

482
00:20:57,600 --> 00:21:00,000
through this presentation but that cuts

483
00:21:00,000 --> 00:21:02,039
away a lot of the busy work of just

484
00:21:02,039 --> 00:21:04,200
creating us for everything it also cuts

485
00:21:04,200 --> 00:21:06,269
down the size of the code which is

486
00:21:06,269 --> 00:21:09,720
really nice too so start first with this

487
00:21:09,720 --> 00:21:12,889
data model our way of representing data

488
00:21:12,889 --> 00:21:16,740
and how we can use that to do things

489
00:21:16,740 --> 00:21:19,049
like undo and stuff like that so our

490
00:21:19,049 --> 00:21:22,320
data model we call it the truth kind of

491
00:21:22,320 --> 00:21:24,630
shakily because it's we considered it's

492
00:21:24,630 --> 00:21:27,299
the truth about the state of the project

493
00:21:27,299 --> 00:21:29,700
it's where where you go to find out

494
00:21:29,700 --> 00:21:33,480
anything about what the editor is doing

495
00:21:33,480 --> 00:21:35,700
so all the data all the data that's

496
00:21:35,700 --> 00:21:37,799
handled by the editor is represented in

497
00:21:37,799 --> 00:21:39,809
a uniform way and then we can define

498
00:21:39,809 --> 00:21:43,559
operations on it so the way the truth is

499
00:21:43,559 --> 00:21:47,700
set up it's based on objects of certain

500
00:21:47,700 --> 00:21:50,279
types each object has a type each type

501
00:21:50,279 --> 00:21:52,620
is a number of properties and each of

502
00:21:52,620 --> 00:21:55,139
those properties has a type so for

503
00:21:55,139 --> 00:21:57,419
example a person object and might have a

504
00:21:57,419 --> 00:21:59,760
name property that is a string and H

505
00:21:59,760 --> 00:22:01,649
property that's an integer and then a

506
00:22:01,649 --> 00:22:04,470
flag that's specifies what it's

507
00:22:04,470 --> 00:22:08,490
registered or something like that so

508
00:22:08,490 --> 00:22:11,130
this is kind of a it's kind of a JSON

509
00:22:11,130 --> 00:22:11,660
like

510
00:22:11,660 --> 00:22:14,450
model model with the way these

511
00:22:14,450 --> 00:22:16,880
properties work except we have sort of a

512
00:22:16,880 --> 00:22:20,030
schema for these different objects we

513
00:22:20,030 --> 00:22:22,130
also have way well-defined ways of

514
00:22:22,130 --> 00:22:24,470
representing references between objects

515
00:22:24,470 --> 00:22:26,210
so and all they can refer to another

516
00:22:26,210 --> 00:22:28,790
object and also sub objects so the

517
00:22:28,790 --> 00:22:30,920
difference here is that sub objects are

518
00:22:30,920 --> 00:22:33,250
objects that are owned by this object

519
00:22:33,250 --> 00:22:36,170
whereas references are external objects

520
00:22:36,170 --> 00:22:38,530
that this object just points to and that

521
00:22:38,530 --> 00:22:40,550
changes how things work when you copy

522
00:22:40,550 --> 00:22:42,410
and paste for instance for example when

523
00:22:42,410 --> 00:22:44,150
you copy and paste you copy all the sub

524
00:22:44,150 --> 00:22:45,650
objects but you don't copy the

525
00:22:45,650 --> 00:22:48,920
references so it's nice to have that

526
00:22:48,920 --> 00:22:53,060
explicit in the data model too so our

527
00:22:53,060 --> 00:22:56,270
data model supports multi-threading

528
00:22:56,270 --> 00:22:58,640
automatically and we do this actually in

529
00:22:58,640 --> 00:23:02,090
a in a log free way and I'll be spending

530
00:23:02,090 --> 00:23:03,560
a little bit about the detail of this

531
00:23:03,560 --> 00:23:06,170
because it's important to other things

532
00:23:06,170 --> 00:23:08,870
that we do in our data model too so the

533
00:23:08,870 --> 00:23:11,170
way we implement lock-free

534
00:23:11,170 --> 00:23:14,450
multi-threaded access is by dividing

535
00:23:14,450 --> 00:23:16,670
change the step of changing the data

536
00:23:16,670 --> 00:23:21,080
into two distinct steps so first you you

537
00:23:21,080 --> 00:23:23,240
call write on the object that you want

538
00:23:23,240 --> 00:23:26,240
to change and by doing that you will

539
00:23:26,240 --> 00:23:27,890
actually obtain a copy of the object

540
00:23:27,890 --> 00:23:32,180
that you can modify and all those

541
00:23:32,180 --> 00:23:34,010
changes are local to this copy of the

542
00:23:34,010 --> 00:23:36,500
object so it doesn't affect any readers

543
00:23:36,500 --> 00:23:38,510
of the data they still see the old old

544
00:23:38,510 --> 00:23:40,550
object and once you're done with all

545
00:23:40,550 --> 00:23:42,230
your changes you call commit on the

546
00:23:42,230 --> 00:23:46,040
object and it will atomically switch out

547
00:23:46,040 --> 00:23:48,920
the old object for the new one with by

548
00:23:48,920 --> 00:23:52,360
just doing an atomic pointer switch and

549
00:23:52,360 --> 00:23:55,100
then all the readers after that all the

550
00:23:55,100 --> 00:23:58,370
readers will see the new object so this

551
00:23:58,370 --> 00:23:59,630
way the readers can read the data

552
00:23:59,630 --> 00:24:02,450
without without locking and eventually

553
00:24:02,450 --> 00:24:05,030
we clean up all the old copies with a

554
00:24:05,030 --> 00:24:10,850
garbage collection procedure so undo in

555
00:24:10,850 --> 00:24:13,130
our system is actually based on this too

556
00:24:13,130 --> 00:24:14,630
which is why I presented this sort of

557
00:24:14,630 --> 00:24:17,090
complicated multi-threading approach

558
00:24:17,090 --> 00:24:21,410
first so undo works in a similar way the

559
00:24:21,410 --> 00:24:23,180
only thing we do different for undo is

560
00:24:23,180 --> 00:24:24,390
that

561
00:24:24,390 --> 00:24:28,510
when we do an when we perform like an

562
00:24:28,510 --> 00:24:31,930
undoable right we save the old object

563
00:24:31,930 --> 00:24:33,340
and the new object so both these

564
00:24:33,340 --> 00:24:36,910
versions in our current undo scope and

565
00:24:36,910 --> 00:24:39,040
we can save these for multiple objects

566
00:24:39,040 --> 00:24:42,220
because one undoable action might affect

567
00:24:42,220 --> 00:24:46,390
multiple objects and when the user wants

568
00:24:46,390 --> 00:24:48,580
to undo something we simply reinstate

569
00:24:48,580 --> 00:24:51,790
the old data that we saved in this undo

570
00:24:51,790 --> 00:24:57,210
scope we also have a system for

571
00:24:57,210 --> 00:25:00,370
prototyping that's bill or prefabs

572
00:25:00,370 --> 00:25:02,400
that's built into our data model and the

573
00:25:02,400 --> 00:25:05,950
way this works is that any object in the

574
00:25:05,950 --> 00:25:09,610
truth can specify another object to act

575
00:25:09,610 --> 00:25:12,400
as its prototype and what this means is

576
00:25:12,400 --> 00:25:14,560
that the instance of the prototype will

577
00:25:14,560 --> 00:25:17,680
inherit all objects of all properties of

578
00:25:17,680 --> 00:25:20,800
the prototype but if it want to it can

579
00:25:20,800 --> 00:25:24,100
override some of them locally so we

580
00:25:24,100 --> 00:25:27,010
could create an another instance of a

581
00:25:27,010 --> 00:25:29,260
person object here that just overrides

582
00:25:29,260 --> 00:25:33,070
the age for instance so this concept is

583
00:25:33,070 --> 00:25:35,380
similar to the way like prefabs work in

584
00:25:35,380 --> 00:25:37,750
in unity for instance for you you can

585
00:25:37,750 --> 00:25:39,100
use a prefab and you can override

586
00:25:39,100 --> 00:25:41,800
properties on it but the important thing

587
00:25:41,800 --> 00:25:44,080
here is it's actually built in into our

588
00:25:44,080 --> 00:25:46,150
data model so it works with everything

589
00:25:46,150 --> 00:25:48,730
it's not just with entities but any kind

590
00:25:48,730 --> 00:25:51,190
of data in the onion can be given this

591
00:25:51,190 --> 00:25:56,160
like prototype treatment which is nice

592
00:25:56,160 --> 00:25:59,550
so other things we can do sort of

593
00:25:59,550 --> 00:26:02,560
because we have this and well-defined

594
00:26:02,560 --> 00:26:04,600
data model is we can do really advanced

595
00:26:04,600 --> 00:26:07,290
things such as real time collaboration

596
00:26:07,290 --> 00:26:11,350
so multiple people on the network can be

597
00:26:11,350 --> 00:26:13,420
working in the same project and the way

598
00:26:13,420 --> 00:26:15,670
this works is that when someone does a

599
00:26:15,670 --> 00:26:17,500
commit so they change something in the

600
00:26:17,500 --> 00:26:19,300
date down we just compute the Delta

601
00:26:19,300 --> 00:26:21,100
between the old and the new version of

602
00:26:21,100 --> 00:26:23,260
the object and then we transmit this

603
00:26:23,260 --> 00:26:25,480
Delta over the wire to our other

604
00:26:25,480 --> 00:26:27,790
collaborators in the session and then

605
00:26:27,790 --> 00:26:29,800
they will get those changes and they

606
00:26:29,800 --> 00:26:32,380
will act enact those changes on their

607
00:26:32,380 --> 00:26:35,410
data model and the data mode will be

608
00:26:35,410 --> 00:26:37,900
replicated so this is an example of

609
00:26:37,900 --> 00:26:40,720
this we have two people working together

610
00:26:40,720 --> 00:26:43,630
here over the network a host and a

611
00:26:43,630 --> 00:26:46,150
client and you can see that any action

612
00:26:46,150 --> 00:26:48,370
that's performed by by either the host

613
00:26:48,370 --> 00:26:51,270
or the client here in this level is

614
00:26:51,270 --> 00:26:53,890
automatically reflected over to the

615
00:26:53,890 --> 00:26:56,260
other person and again since this is

616
00:26:56,260 --> 00:26:58,930
built into the data model it works with

617
00:26:58,930 --> 00:27:02,560
everything and it also works with if you

618
00:27:02,560 --> 00:27:05,380
extend our onion with your own data

619
00:27:05,380 --> 00:27:09,760
types on your own your own kind of your

620
00:27:09,760 --> 00:27:11,500
own data representation and your own UI

621
00:27:11,500 --> 00:27:14,050
switch you can do with plugins all of

622
00:27:14,050 --> 00:27:16,300
this will work automatically for for

623
00:27:16,300 --> 00:27:22,630
your stuff too so sort of analyze this

624
00:27:22,630 --> 00:27:25,120
this approach of using a data model in

625
00:27:25,120 --> 00:27:27,490
this way what are the advantages and

626
00:27:27,490 --> 00:27:29,560
disadvantages that we see well the big

627
00:27:29,560 --> 00:27:31,450
advantages of course is we get all this

628
00:27:31,450 --> 00:27:33,490
functionality for free we get undo we

629
00:27:33,490 --> 00:27:37,870
get copy/paste we get serialization it

630
00:27:37,870 --> 00:27:40,060
just works automatically not just with

631
00:27:40,060 --> 00:27:41,980
our data but with other people's data

632
00:27:41,980 --> 00:27:45,700
and plugins too and as we saw her it's

633
00:27:45,700 --> 00:27:48,520
not just these simple operations like

634
00:27:48,520 --> 00:27:50,170
undoing copy/paste it also works for

635
00:27:50,170 --> 00:27:51,370
really advanced features such as

636
00:27:51,370 --> 00:27:55,200
prototyping or real-time collaboration

637
00:27:55,200 --> 00:27:58,870
so what are the drawbacks one drawback

638
00:27:58,870 --> 00:28:01,930
is that this way of representing the

639
00:28:01,930 --> 00:28:04,480
data the sort of key value format with

640
00:28:04,480 --> 00:28:06,610
objects and properties it doesn't work

641
00:28:06,610 --> 00:28:10,270
well for all kinds of data so an example

642
00:28:10,270 --> 00:28:14,170
of data that's not that well represented

643
00:28:14,170 --> 00:28:16,750
in this model would be long pieces of

644
00:28:16,750 --> 00:28:19,270
text I mean you could do it you could

645
00:28:19,270 --> 00:28:21,520
have an object where the string property

646
00:28:21,520 --> 00:28:24,430
and that string properties just like 200

647
00:28:24,430 --> 00:28:27,880
pages of text but it's not really a nice

648
00:28:27,880 --> 00:28:29,500
way of representing that data because

649
00:28:29,500 --> 00:28:32,200
the way our undo system works means like

650
00:28:32,200 --> 00:28:35,080
if you change one character of that that

651
00:28:35,080 --> 00:28:37,000
big document you have to make a complete

652
00:28:37,000 --> 00:28:40,960
copy of all those 200 pages of text to

653
00:28:40,960 --> 00:28:43,720
do the undo operation so it gets pretty

654
00:28:43,720 --> 00:28:47,770
inefficient for that kind of data but

655
00:28:47,770 --> 00:28:50,530
luckily that's not really the kind of

656
00:28:50,530 --> 00:28:51,789
data that we deal with the

657
00:28:51,789 --> 00:28:55,509
but in-game onions but yeah it's a

658
00:28:55,509 --> 00:28:58,629
drawback of the system another drawback

659
00:28:58,629 --> 00:29:00,220
I would say is that it's a pretty

660
00:29:00,220 --> 00:29:02,229
complex system because it needs to

661
00:29:02,229 --> 00:29:04,109
handle all these different things

662
00:29:04,109 --> 00:29:07,629
prototyping multi-threading and it also

663
00:29:07,629 --> 00:29:10,269
sits at the center of everything like

664
00:29:10,269 --> 00:29:12,700
because because the whole point the

665
00:29:12,700 --> 00:29:16,379
whole point of having a single system

666
00:29:16,379 --> 00:29:18,820
that works with all the data is that

667
00:29:18,820 --> 00:29:20,350
everything will use it so everything

668
00:29:20,350 --> 00:29:24,099
will work the same way so there's really

669
00:29:24,099 --> 00:29:27,129
no way for other system to opt out of

670
00:29:27,129 --> 00:29:29,320
using the truth so if you wanted to

671
00:29:29,320 --> 00:29:31,359
write for example a text editor in the

672
00:29:31,359 --> 00:29:34,179
machinery it would have to use the truth

673
00:29:34,179 --> 00:29:36,609
to be able to interrupt nicely with all

674
00:29:36,609 --> 00:29:38,919
these other systems and so you would

675
00:29:38,919 --> 00:29:40,509
have to figure out you could probably

676
00:29:40,509 --> 00:29:45,220
massage it some way to find a way to use

677
00:29:45,220 --> 00:29:47,259
the truth to still represent your your

678
00:29:47,259 --> 00:29:49,090
text objects so that it would kind of

679
00:29:49,090 --> 00:29:52,599
work but yeah you you can't really opt

680
00:29:52,599 --> 00:29:55,299
out using this system and it's also the

681
00:29:55,299 --> 00:29:57,279
complexity of the system makes it kind

682
00:29:57,279 --> 00:29:59,830
of scary to modify the truth and add new

683
00:29:59,830 --> 00:30:01,720
features to it because everything

684
00:30:01,720 --> 00:30:02,409
depends on it

685
00:30:02,409 --> 00:30:05,200
and the serialize the serialized data

686
00:30:05,200 --> 00:30:07,330
that's stored on disk depends on it so

687
00:30:07,330 --> 00:30:09,009
you might if you mess up you might

688
00:30:09,009 --> 00:30:12,159
destroy people's same projects so it's

689
00:30:12,159 --> 00:30:14,379
kind of a scary system to change you

690
00:30:14,379 --> 00:30:16,210
can't get out of it even if you would

691
00:30:16,210 --> 00:30:18,190
like to and and it sits in the center of

692
00:30:18,190 --> 00:30:20,349
everything I would say those are the

693
00:30:20,349 --> 00:30:22,330
drawbacks that's sort of the price that

694
00:30:22,330 --> 00:30:24,940
you have to pay to get all this nice

695
00:30:24,940 --> 00:30:29,830
stuff for free so next I'll talk a

696
00:30:29,830 --> 00:30:32,379
little about our tech stack as I said we

697
00:30:32,379 --> 00:30:35,440
really want to avoid being dependent on

698
00:30:35,440 --> 00:30:38,679
on frameworks so we built most of our

699
00:30:38,679 --> 00:30:41,919
tech stack ourselves we also want to

700
00:30:41,919 --> 00:30:44,559
keep the tech stack itself as simple as

701
00:30:44,559 --> 00:30:46,239
possible if you remember from the

702
00:30:46,239 --> 00:30:47,799
Stingray tech stack we had a lot of

703
00:30:47,799 --> 00:30:49,599
different language him languages

704
00:30:49,599 --> 00:30:52,269
involved C++ and C sharp Lua and

705
00:30:52,269 --> 00:30:54,849
JavaScript and we also had like scrapes

706
00:30:54,849 --> 00:30:58,629
written in in Ruby and Python so big

707
00:30:58,629 --> 00:31:02,679
ball of things so for the machinery we

708
00:31:02,679 --> 00:31:04,149
decided to change that completely and

709
00:31:04,149 --> 00:31:06,040
write everything in

710
00:31:06,040 --> 00:31:08,170
even our Little Helper scripts are

711
00:31:08,170 --> 00:31:11,470
written in C to the external libraries

712
00:31:11,470 --> 00:31:14,170
we use is very limited so we basically

713
00:31:14,170 --> 00:31:16,150
just use bulk and when it comes to the

714
00:31:16,150 --> 00:31:19,240
UI we use Vulcan for rendering and then

715
00:31:19,240 --> 00:31:21,310
we have the platform SDK as we need to

716
00:31:21,310 --> 00:31:24,400
access to to get access to input events

717
00:31:24,400 --> 00:31:26,170
like such as keyboard and mouse events

718
00:31:26,170 --> 00:31:29,440
and then we have our own the API

719
00:31:29,440 --> 00:31:31,630
abstractions on top of that a 2d layer

720
00:31:31,630 --> 00:31:33,820
for doing 2d drawing and an input layer

721
00:31:33,820 --> 00:31:36,730
which is our abstraction over the OS

722
00:31:36,730 --> 00:31:39,630
input layers it's common for all

723
00:31:39,630 --> 00:31:42,280
operating systems and then we have our

724
00:31:42,280 --> 00:31:44,230
you a system on top of that which is an

725
00:31:44,230 --> 00:31:46,840
immediate mode UI and then we build our

726
00:31:46,840 --> 00:31:49,800
applications and editors on top of that

727
00:31:49,800 --> 00:31:56,140
so our 2d drawing library it has regular

728
00:31:56,140 --> 00:31:58,300
2d drawing operations such as stroke

729
00:31:58,300 --> 00:32:01,180
react and fill rect etc whatever you

730
00:32:01,180 --> 00:32:04,600
need for for drawing the UI but the ways

731
00:32:04,600 --> 00:32:07,360
implement that is kind of interesting we

732
00:32:07,360 --> 00:32:09,550
actually all these drawing operations

733
00:32:09,550 --> 00:32:12,850
actually write data directly into a

734
00:32:12,850 --> 00:32:15,190
single vertex buffer and a single index

735
00:32:15,190 --> 00:32:17,860
buffer that will contain all the things

736
00:32:17,860 --> 00:32:19,840
that we want to draw in the UI like regs

737
00:32:19,840 --> 00:32:23,470
and text and so on and at the end we

738
00:32:23,470 --> 00:32:25,630
just render these buffers with a single

739
00:32:25,630 --> 00:32:28,390
draw call and if you want to learn more

740
00:32:28,390 --> 00:32:30,370
about that I've got a link to our blog

741
00:32:30,370 --> 00:32:32,710
that kind of explains how we actually do

742
00:32:32,710 --> 00:32:36,220
this but the end result is our drawing

743
00:32:36,220 --> 00:32:38,770
is really really performant since it's

744
00:32:38,770 --> 00:32:46,110
just one draw call to draw the entire UI

745
00:32:46,110 --> 00:32:50,740
clipping is done by the pixel shader so

746
00:32:50,740 --> 00:32:53,110
when we want to do clipping if we write

747
00:32:53,110 --> 00:32:55,060
our click breaks to the vertex buffer 2

748
00:32:55,060 --> 00:32:58,720
and then the pixel shader will refer to

749
00:32:58,720 --> 00:33:01,270
these clipping recs and and click the

750
00:33:01,270 --> 00:33:03,610
data against it as it's written so we we

751
00:33:03,610 --> 00:33:06,310
do no clipping on the CPU it's all

752
00:33:06,310 --> 00:33:08,680
happening in the shaders which makes

753
00:33:08,680 --> 00:33:13,720
that really efficient too so overlays

754
00:33:13,720 --> 00:33:15,610
this is this is kind of a neat trick

755
00:33:15,610 --> 00:33:18,240
which is why I wanted to mention that

756
00:33:18,240 --> 00:33:22,020
so when we're drawing something in an

757
00:33:22,020 --> 00:33:24,240
immediate mode UI it will sort of appear

758
00:33:24,240 --> 00:33:26,790
in the order that it's drawn but

759
00:33:26,790 --> 00:33:28,620
sometimes we have a desire to make stuff

760
00:33:28,620 --> 00:33:30,720
appear on top of stuff that will be

761
00:33:30,720 --> 00:33:32,370
drawn later for example if we have a

762
00:33:32,370 --> 00:33:35,520
pop-up menu or a context menu we want

763
00:33:35,520 --> 00:33:38,190
that stuff to sort of float on top of

764
00:33:38,190 --> 00:33:42,420
the stuff that we draw after it and the

765
00:33:42,420 --> 00:33:45,840
way we handle that it's not really by

766
00:33:45,840 --> 00:33:47,670
doing some complicated layering

767
00:33:47,670 --> 00:33:50,790
procedure stuff like that we just keep

768
00:33:50,790 --> 00:33:54,059
two separate index buffers so we have

769
00:33:54,059 --> 00:33:56,460
one index buffer that control contains

770
00:33:56,460 --> 00:33:58,200
all sort of our main layered roll call

771
00:33:58,200 --> 00:34:01,470
and then we have a separate index buffer

772
00:34:01,470 --> 00:34:03,240
which we call the overlay index buffer

773
00:34:03,240 --> 00:34:06,900
where all the popups drawing happens and

774
00:34:06,900 --> 00:34:10,260
then at the end when we want to so we

775
00:34:10,260 --> 00:34:12,510
just keep a single vertex buffer or a

776
00:34:12,510 --> 00:34:14,520
single primitive buffer we called it

777
00:34:14,520 --> 00:34:18,810
vertex buffer primitive buffer where all

778
00:34:18,810 --> 00:34:22,290
the vertices go into but we keep two

779
00:34:22,290 --> 00:34:23,760
separate index buffers and then at the

780
00:34:23,760 --> 00:34:25,919
end when we're ready to draw anything we

781
00:34:25,919 --> 00:34:27,990
just concatenate these two index buffers

782
00:34:27,990 --> 00:34:30,090
so we just put all the overlay stuff at

783
00:34:30,090 --> 00:34:33,210
the end after all the the regular stuff

784
00:34:33,210 --> 00:34:35,310
has been drawn and since the index

785
00:34:35,310 --> 00:34:37,800
buffer sort of contains all the actual

786
00:34:37,800 --> 00:34:39,330
stuff that's being drawn by

787
00:34:39,330 --> 00:34:42,119
concatenating the index buffer at the

788
00:34:42,119 --> 00:34:45,179
end be the effect will be that all the

789
00:34:45,179 --> 00:34:47,669
overlay stuff appears on top of all the

790
00:34:47,669 --> 00:34:49,109
regular stuff so it's kind of a

791
00:34:49,109 --> 00:34:52,859
interesting way that we use the the fact

792
00:34:52,859 --> 00:34:54,419
that we're we're drawing everything

793
00:34:54,419 --> 00:34:56,669
straight to buffers to do this overlay

794
00:34:56,669 --> 00:34:58,680
effect one thing to note here is that

795
00:34:58,680 --> 00:35:01,140
there are since we're drawing everything

796
00:35:01,140 --> 00:35:03,060
including our overlays with a single

797
00:35:03,060 --> 00:35:05,010
draw called our overlays camp actually

798
00:35:05,010 --> 00:35:07,859
protrude outside your main window as

799
00:35:07,859 --> 00:35:10,230
they can and windows for example so

800
00:35:10,230 --> 00:35:12,420
popup menu will always be clipped to

801
00:35:12,420 --> 00:35:15,150
them to the main window if you wanted to

802
00:35:15,150 --> 00:35:18,660
if you wanted to show it outside your

803
00:35:18,660 --> 00:35:20,130
sort of main rendering when you have to

804
00:35:20,130 --> 00:35:22,380
spawn a new a new window to hold your

805
00:35:22,380 --> 00:35:24,119
popup so that's kind of a different

806
00:35:24,119 --> 00:35:26,130
technique but this is an interesting

807
00:35:26,130 --> 00:35:28,859
interesting way of doing it the way a

808
00:35:28,859 --> 00:35:30,810
way you can do it with just a single

809
00:35:30,810 --> 00:35:31,369
draw call

810
00:35:31,369 --> 00:35:35,720
even the overlays sorry UI as I said

811
00:35:35,720 --> 00:35:38,539
before it's an immediate mode UI so that

812
00:35:38,539 --> 00:35:41,210
means we're not like explicitly creating

813
00:35:41,210 --> 00:35:44,329
or destroying UI objects that's kind of

814
00:35:44,329 --> 00:35:46,910
what we mean by immediate mode instead

815
00:35:46,910 --> 00:35:49,579
we have like a single call to draw a

816
00:35:49,579 --> 00:35:52,690
control and handle the interaction so

817
00:35:52,690 --> 00:35:55,609
for a button in for instance we have a

818
00:35:55,609 --> 00:35:58,099
draw call and we call it with a

819
00:35:58,099 --> 00:35:59,869
rectangle and text and it will draw a

820
00:35:59,869 --> 00:36:02,390
button with that text in that rectangle

821
00:36:02,390 --> 00:36:04,519
and if the button was clicked in this

822
00:36:04,519 --> 00:36:07,789
frame it will return true and otherwise

823
00:36:07,789 --> 00:36:10,400
it will return false similar with the

824
00:36:10,400 --> 00:36:14,930
check box we call the check box and I

825
00:36:14,930 --> 00:36:16,759
call the function to draw check box we

826
00:36:16,759 --> 00:36:19,249
pass in a flag if the check box was

827
00:36:19,249 --> 00:36:23,630
toggled this frame this frame that flag

828
00:36:23,630 --> 00:36:26,240
will be toggled by the function so the

829
00:36:26,240 --> 00:36:27,619
important thing to know here about the

830
00:36:27,619 --> 00:36:29,180
immediate mode device is that these

831
00:36:29,180 --> 00:36:31,069
buttons and check boxes that we are

832
00:36:31,069 --> 00:36:33,170
drawing here they're not saved anywhere

833
00:36:33,170 --> 00:36:35,089
after we've called this function there's

834
00:36:35,089 --> 00:36:37,819
no memory that there ever was a button

835
00:36:37,819 --> 00:36:40,660
or a checkbox in this place

836
00:36:40,660 --> 00:36:43,460
so these controls that were drawing they

837
00:36:43,460 --> 00:36:45,739
don't really have any existence no

838
00:36:45,739 --> 00:36:47,900
permanent existence like the next frame

839
00:36:47,900 --> 00:36:49,489
we might go a complete different set of

840
00:36:49,489 --> 00:36:53,690
controls so the way we sort of keep

841
00:36:53,690 --> 00:36:55,460
track of what what's happening with the

842
00:36:55,460 --> 00:36:57,470
controls is that each control is given a

843
00:36:57,470 --> 00:37:00,499
unique ID and that way we can sort of

844
00:37:00,499 --> 00:37:02,869
keep track of which control the mouse is

845
00:37:02,869 --> 00:37:04,880
currently hovering over or which control

846
00:37:04,880 --> 00:37:07,480
the users interact and interacting with

847
00:37:07,480 --> 00:37:10,309
when these controls don't really exist

848
00:37:10,309 --> 00:37:14,749
permanently so pros and cons of this

849
00:37:14,749 --> 00:37:17,329
approach using immediate mode yeah I

850
00:37:17,329 --> 00:37:19,400
would say the big advantage is that you

851
00:37:19,400 --> 00:37:22,099
get completely straightforward code flow

852
00:37:22,099 --> 00:37:24,559
so if you want to know know if you have

853
00:37:24,559 --> 00:37:26,989
like a debug somewhere like control is

854
00:37:26,989 --> 00:37:30,470
showing the wrong State or control is

855
00:37:30,470 --> 00:37:32,420
being too slow you can just step through

856
00:37:32,420 --> 00:37:33,980
the code and see everything that's

857
00:37:33,980 --> 00:37:36,470
happening from the call to button to

858
00:37:36,470 --> 00:37:39,230
every part of the button being drawn and

859
00:37:39,230 --> 00:37:41,029
the function returning you can see the

860
00:37:41,029 --> 00:37:42,739
performance of it you can see any bugs

861
00:37:42,739 --> 00:37:45,530
in it and it's just

862
00:37:45,530 --> 00:37:47,360
you just go in there and do it whereas

863
00:37:47,360 --> 00:37:49,490
if you have a retained mode UI which is

864
00:37:49,490 --> 00:37:51,260
like the alternative to immediate mode

865
00:37:51,260 --> 00:37:53,840
you have some part of the code over here

866
00:37:53,840 --> 00:37:55,640
that is setting things up creating

867
00:37:55,640 --> 00:37:57,740
controls destroying controls and then

868
00:37:57,740 --> 00:37:59,630
you have some part over here which is

869
00:37:59,630 --> 00:38:02,660
probably deep inside the framework where

870
00:38:02,660 --> 00:38:04,340
the interaction of the controller or the

871
00:38:04,340 --> 00:38:06,380
drawing of the control actually happens

872
00:38:06,380 --> 00:38:08,150
and these parts are kind of separate but

873
00:38:08,150 --> 00:38:09,770
what you do over here affects what

874
00:38:09,770 --> 00:38:11,360
happens over here so if you have a

875
00:38:11,360 --> 00:38:13,730
performance problems you kind of need to

876
00:38:13,730 --> 00:38:16,010
figure out or a bug you need to figure

877
00:38:16,010 --> 00:38:18,320
out like how these different parts work

878
00:38:18,320 --> 00:38:21,010
together which is way more complicated

879
00:38:21,010 --> 00:38:23,480
another advantage of immediate mode is

880
00:38:23,480 --> 00:38:25,610
that there's no need to synchronize

881
00:38:25,610 --> 00:38:29,360
state so so where is retained mode you

882
00:38:29,360 --> 00:38:31,310
have to have like events getting sent

883
00:38:31,310 --> 00:38:32,630
from controls and then you have to

884
00:38:32,630 --> 00:38:34,970
process those events to change your your

885
00:38:34,970 --> 00:38:37,730
data whereas here we're just drawing the

886
00:38:37,730 --> 00:38:39,710
data when we draw the control we pass in

887
00:38:39,710 --> 00:38:42,170
when we draw the checks box with PACs in

888
00:38:42,170 --> 00:38:44,630
the current state so we send the data

889
00:38:44,630 --> 00:38:47,030
directly from the application there's no

890
00:38:47,030 --> 00:38:49,130
need of processing events or anything

891
00:38:49,130 --> 00:38:51,230
like that which i think is a big

892
00:38:51,230 --> 00:38:55,370
advantage a disadvantage that people

893
00:38:55,370 --> 00:38:56,840
often bring up is that you have to

894
00:38:56,840 --> 00:38:59,630
redraw everything and that that can be

895
00:38:59,630 --> 00:39:03,020
expensive just redrawing the UI every

896
00:39:03,020 --> 00:39:04,280
frame

897
00:39:04,280 --> 00:39:06,590
I think that's less of a concern for a

898
00:39:06,590 --> 00:39:08,390
3d application like a game editor

899
00:39:08,390 --> 00:39:10,760
because you typically have a viewport in

900
00:39:10,760 --> 00:39:13,100
there and that viewport typically wants

901
00:39:13,100 --> 00:39:15,830
to render every frame anyway at least if

902
00:39:15,830 --> 00:39:17,060
you have some kind of animation or

903
00:39:17,060 --> 00:39:19,090
anything going on there

904
00:39:19,090 --> 00:39:22,220
so you're not really wasting any any

905
00:39:22,220 --> 00:39:24,410
resources but by also rendering the UI

906
00:39:24,410 --> 00:39:27,290
every frame there are also also ways to

907
00:39:27,290 --> 00:39:29,330
get around rendering every frame if you

908
00:39:29,330 --> 00:39:31,970
need to for example you can render only

909
00:39:31,970 --> 00:39:34,280
when you have actual input actions that

910
00:39:34,280 --> 00:39:36,890
would change the UI so if the user moved

911
00:39:36,890 --> 00:39:39,200
the mouse or if the user press the

912
00:39:39,200 --> 00:39:42,830
keyboard you Yury render the UI and

913
00:39:42,830 --> 00:39:45,440
otherwise you don't do it I actually

914
00:39:45,440 --> 00:39:48,380
find that that with immediate mode you

915
00:39:48,380 --> 00:39:50,630
guys is kind of easier to to get good

916
00:39:50,630 --> 00:39:53,510
performance because you can easily match

917
00:39:53,510 --> 00:39:56,210
you don't have to deal with anything

918
00:39:56,210 --> 00:39:58,530
that's not visible on the screen

919
00:39:58,530 --> 00:40:00,810
if you have a long list of items like a

920
00:40:00,810 --> 00:40:03,420
thousand items in a list it's very easy

921
00:40:03,420 --> 00:40:05,940
to like just figure out like Oh which

922
00:40:05,940 --> 00:40:08,970
items are actually visible right now on

923
00:40:08,970 --> 00:40:10,680
the screen like in the wreck that I'm

924
00:40:10,680 --> 00:40:12,540
drawing this listing right now what

925
00:40:12,540 --> 00:40:14,610
items can be seen and then you just

926
00:40:14,610 --> 00:40:16,380
processed those items you don't have to

927
00:40:16,380 --> 00:40:19,140
care about anything else whereas when

928
00:40:19,140 --> 00:40:20,910
you're doing retain mode like if you're

929
00:40:20,910 --> 00:40:22,440
doing retain mode in the default setup

930
00:40:22,440 --> 00:40:24,960
if you have a list of 10,000 items you

931
00:40:24,960 --> 00:40:27,420
have to somewhere create these 10,000

932
00:40:27,420 --> 00:40:30,030
items and that might be really expensive

933
00:40:30,030 --> 00:40:32,550
and the processing of those 10,000 items

934
00:40:32,550 --> 00:40:36,480
might be really expensive so to speed up

935
00:40:36,480 --> 00:40:38,010
performance you might have to resort to

936
00:40:38,010 --> 00:40:39,510
some trick like oh I have to use

937
00:40:39,510 --> 00:40:40,440
virtualized

938
00:40:40,440 --> 00:40:42,360
items where I don't actually create the

939
00:40:42,360 --> 00:40:45,030
items until they're really shown on

940
00:40:45,030 --> 00:40:47,550
screen or something like that and and

941
00:40:47,550 --> 00:40:49,560
you have to resort to tricks like that

942
00:40:49,560 --> 00:40:51,210
in order to get the performance back

943
00:40:51,210 --> 00:40:55,530
whereas wind immediate mode you're it's

944
00:40:55,530 --> 00:40:57,600
very easy to do this kind of clipping

945
00:40:57,600 --> 00:41:00,900
and just do just do the processing for

946
00:41:00,900 --> 00:41:02,520
the thing that's actually shown on

947
00:41:02,520 --> 00:41:04,650
screen so I find it a lot easier to get

948
00:41:04,650 --> 00:41:06,090
a good performance out of an immediate

949
00:41:06,090 --> 00:41:08,430
mode UI and then a lot of easier to

950
00:41:08,430 --> 00:41:10,170
actually find where your performance is

951
00:41:10,170 --> 00:41:13,830
going to but it is a new mindset and it

952
00:41:13,830 --> 00:41:18,510
can it can take time to get used to and

953
00:41:18,510 --> 00:41:20,700
the big thing with a new mindset is that

954
00:41:20,700 --> 00:41:24,150
there aren't actually any objects to

955
00:41:24,150 --> 00:41:25,350
talk to you because that's what you're

956
00:41:25,350 --> 00:41:28,530
used from used to from a retain mode you

957
00:41:28,530 --> 00:41:30,630
have a button somewhere and you can sort

958
00:41:30,630 --> 00:41:33,240
of message this button and get it to do

959
00:41:33,240 --> 00:41:35,940
something but in the medium mode that

960
00:41:35,940 --> 00:41:38,480
doesn't exist so one example of that is

961
00:41:38,480 --> 00:41:41,970
for example if the user selects copy in

962
00:41:41,970 --> 00:41:44,300
the main menu if you have retained mode

963
00:41:44,300 --> 00:41:47,850
UI you would find out which is the

964
00:41:47,850 --> 00:41:51,570
current focused window or text field or

965
00:41:51,570 --> 00:41:54,210
whatever and you would send that copy

966
00:41:54,210 --> 00:41:57,000
event to that object now you can't do

967
00:41:57,000 --> 00:41:59,490
that in retain mode cursors or in

968
00:41:59,490 --> 00:42:01,110
immediate mode because there is no

969
00:42:01,110 --> 00:42:03,240
object to send it to so how do you do

970
00:42:03,240 --> 00:42:05,040
things like that you have to like sort

971
00:42:05,040 --> 00:42:09,960
of wrap your mind around it this this

972
00:42:09,960 --> 00:42:13,809
shows here the state synchronization

973
00:42:13,809 --> 00:42:18,670
which is which is really nice we have a

974
00:42:18,670 --> 00:42:21,190
number of different views here that are

975
00:42:21,190 --> 00:42:24,089
all showing the name of this object and

976
00:42:24,089 --> 00:42:26,680
to sort of synchronize the name between

977
00:42:26,680 --> 00:42:28,150
this different views we don't have to do

978
00:42:28,150 --> 00:42:30,430
anything because all these views are

979
00:42:30,430 --> 00:42:33,099
drawing it straight from the data so

980
00:42:33,099 --> 00:42:36,119
whenever it's changed in one view it

981
00:42:36,119 --> 00:42:38,410
automatically gets updated into all

982
00:42:38,410 --> 00:42:39,640
these other views and they will

983
00:42:39,640 --> 00:42:42,039
automatically show this change without

984
00:42:42,039 --> 00:42:44,109
the need for processing any events or

985
00:42:44,109 --> 00:42:46,839
having any observer observable patterns

986
00:42:46,839 --> 00:42:49,230
or anything like that which i think is a

987
00:42:49,230 --> 00:42:56,920
great advantage of using this model as

988
00:42:56,920 --> 00:43:00,549
an example of God shows you run into and

989
00:43:00,549 --> 00:43:02,920
have you how you sort of need to change

990
00:43:02,920 --> 00:43:04,480
your thinking when you're dealing with

991
00:43:04,480 --> 00:43:08,619
immediate mode a problem that pops up

992
00:43:08,619 --> 00:43:10,960
sometimes is if you have overlapping

993
00:43:10,960 --> 00:43:13,900
objects so suppose that we have sort of

994
00:43:13,900 --> 00:43:18,069
a graph editor where that spaced on

995
00:43:18,069 --> 00:43:20,349
nodes and you can drag these notes

996
00:43:20,349 --> 00:43:23,380
around and suppose that you have two

997
00:43:23,380 --> 00:43:25,150
nodes two overlapping nodes like this

998
00:43:25,150 --> 00:43:28,210
and you want to process mouse clicks now

999
00:43:28,210 --> 00:43:29,980
if this was in retained mode we would

1000
00:43:29,980 --> 00:43:32,650
probably just loop over all these graph

1001
00:43:32,650 --> 00:43:34,920
objects that would exist in the UI and

1002
00:43:34,920 --> 00:43:38,349
check for mouse interactions but we

1003
00:43:38,349 --> 00:43:40,359
can't do that because the objects don't

1004
00:43:40,359 --> 00:43:42,670
really exist instead we sort of we have

1005
00:43:42,670 --> 00:43:45,039
to process these events as we are

1006
00:43:45,039 --> 00:43:47,950
drawing each object and the problem here

1007
00:43:47,950 --> 00:43:50,950
is that when we're drawing node one here

1008
00:43:50,950 --> 00:43:53,109
which happens before node two because

1009
00:43:53,109 --> 00:43:54,999
we're growing everything on orders so

1010
00:43:54,999 --> 00:43:56,589
the things we draw later appear on top

1011
00:43:56,589 --> 00:43:58,930
so when we're drawing node one here in

1012
00:43:58,930 --> 00:44:02,470
our immediate mode we don't know that

1013
00:44:02,470 --> 00:44:05,200
we're going to draw node two later so

1014
00:44:05,200 --> 00:44:07,749
node one temped just do a test like well

1015
00:44:07,749 --> 00:44:10,869
if the mouse is inside my rectangle and

1016
00:44:10,869 --> 00:44:12,430
the button is pressed

1017
00:44:12,430 --> 00:44:14,769
I should process this event because we

1018
00:44:14,769 --> 00:44:17,739
might draw node two later on top of node

1019
00:44:17,739 --> 00:44:21,069
1 in which case no two should actually

1020
00:44:21,069 --> 00:44:23,680
process this mouse event so how can we

1021
00:44:23,680 --> 00:44:25,940
fix this this when you're like

1022
00:44:25,940 --> 00:44:27,829
back in this retain mode object thinking

1023
00:44:27,829 --> 00:44:31,250
this might seem super super tricky but

1024
00:44:31,250 --> 00:44:33,619
we can actually fix this by introducing

1025
00:44:33,619 --> 00:44:39,530
a frame delay so the way we do it in in

1026
00:44:39,530 --> 00:44:44,420
the machinery is that we we keep track

1027
00:44:44,420 --> 00:44:49,640
of which object which objects the mouse

1028
00:44:49,640 --> 00:44:54,170
is hovering over so and we do it we

1029
00:44:54,170 --> 00:44:58,250
assign it at the end of the frame so we

1030
00:44:58,250 --> 00:45:00,260
check when we're drawing this this note

1031
00:45:00,260 --> 00:45:02,329
here we check if the mouse is in the

1032
00:45:02,329 --> 00:45:05,180
rect of the node and if it is we says

1033
00:45:05,180 --> 00:45:07,339
well the hover for next frame should be

1034
00:45:07,339 --> 00:45:10,190
our ID remember our unique ID is how we

1035
00:45:10,190 --> 00:45:13,460
identify this control in the UI and then

1036
00:45:13,460 --> 00:45:15,859
we check well if the Harvard object is

1037
00:45:15,859 --> 00:45:19,069
our object and the button is down then

1038
00:45:19,069 --> 00:45:21,770
we should process the event so let's see

1039
00:45:21,770 --> 00:45:23,599
how this works when we have two nodes

1040
00:45:23,599 --> 00:45:25,700
here like this so in this case the first

1041
00:45:25,700 --> 00:45:28,220
node would go here it would see oh the

1042
00:45:28,220 --> 00:45:31,970
rectangle is in in the mouse's in my

1043
00:45:31,970 --> 00:45:34,550
rect and it would set next hover the

1044
00:45:34,550 --> 00:45:36,560
hover that we should use for the next

1045
00:45:36,560 --> 00:45:40,099
frame - my ID then it would get then we

1046
00:45:40,099 --> 00:45:42,500
get to this check is the hover my ID and

1047
00:45:42,500 --> 00:45:45,560
the button is down the hover is not the

1048
00:45:45,560 --> 00:45:47,300
idea of this control yet because we only

1049
00:45:47,300 --> 00:45:49,579
said the next our variable not the hover

1050
00:45:49,579 --> 00:45:52,730
variable then it gets to know to the

1051
00:45:52,730 --> 00:45:55,339
node to text is the mouse in my rect and

1052
00:45:55,339 --> 00:45:59,480
it is which means no two updates needs

1053
00:45:59,480 --> 00:46:02,210
next hour to now point to no 2 so it

1054
00:46:02,210 --> 00:46:05,030
overrides what no one did and now next

1055
00:46:05,030 --> 00:46:07,369
hour is no 2 then we get to the end of

1056
00:46:07,369 --> 00:46:09,829
the frame which means we assign next

1057
00:46:09,829 --> 00:46:10,849
hover over to hover

1058
00:46:10,849 --> 00:46:13,670
so however is now assigned to no 2 which

1059
00:46:13,670 --> 00:46:15,349
means the next frame when we go through

1060
00:46:15,349 --> 00:46:17,540
this code again no 2 will see it will

1061
00:46:17,540 --> 00:46:19,700
hover is actually my ID and the button

1062
00:46:19,700 --> 00:46:21,950
is down so I should process process the

1063
00:46:21,950 --> 00:46:25,910
event so we had to do a frame delay here

1064
00:46:25,910 --> 00:46:29,180
where the mouse click is not detected

1065
00:46:29,180 --> 00:46:31,130
the first event to really hover is not

1066
00:46:31,130 --> 00:46:33,859
detected the first frame it only happens

1067
00:46:33,859 --> 00:46:36,740
in in the second frame and this is

1068
00:46:36,740 --> 00:46:39,810
basically the only way we can do this

1069
00:46:39,810 --> 00:46:42,810
because since no one doesn't know what

1070
00:46:42,810 --> 00:46:44,490
might be drawn after it we have to go

1071
00:46:44,490 --> 00:46:46,590
through an entire frame in order to

1072
00:46:46,590 --> 00:46:49,080
discover all the things that that can

1073
00:46:49,080 --> 00:46:51,540
potentially be drawn effort so it's it's

1074
00:46:51,540 --> 00:46:56,700
a different way of thinking and lots of

1075
00:46:56,700 --> 00:46:58,440
times this it's a different way of

1076
00:46:58,440 --> 00:47:00,840
thinking if you use to retain mode and

1077
00:47:00,840 --> 00:47:02,610
I've seen I've seen a lot of people

1078
00:47:02,610 --> 00:47:05,430
claim like well immediate mode UI seems

1079
00:47:05,430 --> 00:47:07,950
great but they can't do this and this

1080
00:47:07,950 --> 00:47:09,480
can be a lot of things sometimes it's

1081
00:47:09,480 --> 00:47:11,310
like drag and drop sometimes it's like

1082
00:47:11,310 --> 00:47:14,460
other stuff and and I find that that's

1083
00:47:14,460 --> 00:47:18,000
not true at all there's always a way to

1084
00:47:18,000 --> 00:47:20,760
do it in immediate mode but you have you

1085
00:47:20,760 --> 00:47:23,040
might have to do a trick like that there

1086
00:47:23,040 --> 00:47:25,040
like this like introducing a frame delay

1087
00:47:25,040 --> 00:47:28,620
like saving some data somewhere you have

1088
00:47:28,620 --> 00:47:30,930
to retain some data like we're we're

1089
00:47:30,930 --> 00:47:33,330
retaining the hover hover variable here

1090
00:47:33,330 --> 00:47:35,730
but you don't have to retain the whole

1091
00:47:35,730 --> 00:47:37,530
state of controls and stuff that you

1092
00:47:37,530 --> 00:47:39,870
just have to figure out what kind of

1093
00:47:39,870 --> 00:47:42,180
date that you have to retain and do then

1094
00:47:42,180 --> 00:47:44,280
do this sort of frame delay trick and

1095
00:47:44,280 --> 00:47:45,690
then you can solve all these problems

1096
00:47:45,690 --> 00:47:48,420
it's my my experience I haven't run into

1097
00:47:48,420 --> 00:47:51,300
anything that I wanted to do that that

1098
00:47:51,300 --> 00:47:54,630
can't be done in an immediate mode so if

1099
00:47:54,630 --> 00:47:56,400
someone says that to you immediate mode

1100
00:47:56,400 --> 00:47:58,710
can't do that I encourage you to

1101
00:47:58,710 --> 00:48:02,430
challenge that there are lots of stuff

1102
00:48:02,430 --> 00:48:04,680
that's that's really nice in immediate

1103
00:48:04,680 --> 00:48:06,510
mode that's the sort of problematic in

1104
00:48:06,510 --> 00:48:09,540
routine mode one thing is layouting I

1105
00:48:09,540 --> 00:48:12,900
really don't like layout managers that

1106
00:48:12,900 --> 00:48:15,390
you have in lots of UI frameworks I find

1107
00:48:15,390 --> 00:48:17,430
them really painful to work with usually

1108
00:48:17,430 --> 00:48:20,610
trying to get CSS to put controls in the

1109
00:48:20,610 --> 00:48:24,690
right place is is it's a pain in the ass

1110
00:48:24,690 --> 00:48:26,790
whereas if we're working in immediate

1111
00:48:26,790 --> 00:48:28,800
mode we don't really need a layout

1112
00:48:28,800 --> 00:48:30,720
manager to do any kind of layout thing

1113
00:48:30,720 --> 00:48:32,910
we're just working directly with the

1114
00:48:32,910 --> 00:48:35,070
rectangles here so we can just split

1115
00:48:35,070 --> 00:48:37,860
them ourselves and you do whatever fancy

1116
00:48:37,860 --> 00:48:40,260
algorithm on to split it like if you

1117
00:48:40,260 --> 00:48:44,310
want to equally sized columns we don't

1118
00:48:44,310 --> 00:48:47,490
have to like come up with some way of

1119
00:48:47,490 --> 00:48:49,440
tricking our layout manager into doing

1120
00:48:49,440 --> 00:48:51,990
that be a split split direct in half and

1121
00:48:51,990 --> 00:48:53,579
we have two equally sized call

1122
00:48:53,579 --> 00:48:57,040
so it's an example of here of this here

1123
00:48:57,040 --> 00:49:00,040
we want to do a layout like this

1124
00:49:00,040 --> 00:49:02,500
we are split off a rectangle at the top

1125
00:49:02,500 --> 00:49:05,460
to hold our header here we split up

1126
00:49:05,460 --> 00:49:08,710
split off another rect off that top rect

1127
00:49:08,710 --> 00:49:11,380
for the search field and we split off a

1128
00:49:11,380 --> 00:49:13,030
rect at the bottom to hold the footer

1129
00:49:13,030 --> 00:49:14,829
and then we use sort of a dynamic

1130
00:49:14,829 --> 00:49:17,829
splitter to do this split between the

1131
00:49:17,829 --> 00:49:22,630
two two areas here so this is super

1132
00:49:22,630 --> 00:49:24,940
straightforward in my mind super

1133
00:49:24,940 --> 00:49:26,980
straightforward super easy to understand

1134
00:49:26,980 --> 00:49:29,109
super easy to debug compared to trying

1135
00:49:29,109 --> 00:49:31,660
to get like a layout manager to get do

1136
00:49:31,660 --> 00:49:35,380
this kind of behavior doing custom

1137
00:49:35,380 --> 00:49:37,599
controls super easy to in an immediate

1138
00:49:37,599 --> 00:49:40,810
mode you are to do a custom control all

1139
00:49:40,810 --> 00:49:42,369
you have to do is to implement the

1140
00:49:42,369 --> 00:49:44,770
drawing of the custom control using all

1141
00:49:44,770 --> 00:49:46,930
these draw commands and destroy crack

1142
00:49:46,930 --> 00:49:49,210
filler eggs and so on and then implement

1143
00:49:49,210 --> 00:49:51,160
sort of the inputs interactions like

1144
00:49:51,160 --> 00:49:53,619
handle mouse clicks keyboard clicks and

1145
00:49:53,619 --> 00:49:56,440
so on and in fact there's no distinction

1146
00:49:56,440 --> 00:49:58,599
really between built-in and custom

1147
00:49:58,599 --> 00:50:00,609
controls our our building controls are

1148
00:50:00,609 --> 00:50:02,829
written in exactly the same way as as a

1149
00:50:02,829 --> 00:50:06,849
custom control would be and just to show

1150
00:50:06,849 --> 00:50:09,550
you an example this is how this drag

1151
00:50:09,550 --> 00:50:11,530
number control would be implemented I

1152
00:50:11,530 --> 00:50:13,500
won't go through this in detail because

1153
00:50:13,500 --> 00:50:17,020
it's it's a bunch of code but just to

1154
00:50:17,020 --> 00:50:20,230
show that it doesn't need a lot of code

1155
00:50:20,230 --> 00:50:21,849
to implement something like this you can

1156
00:50:21,849 --> 00:50:24,329
do it pretty easily

1157
00:50:24,329 --> 00:50:28,510
so in summary having the full control of

1158
00:50:28,510 --> 00:50:30,849
the tech stack like this it's really

1159
00:50:30,849 --> 00:50:34,210
nice it reduces the complexity a lot we

1160
00:50:34,210 --> 00:50:35,650
don't have to worry about framework

1161
00:50:35,650 --> 00:50:38,530
changes we can step through and debug

1162
00:50:38,530 --> 00:50:41,770
anything there's the same language and

1163
00:50:41,770 --> 00:50:44,530
API is used everywhere in the onion so

1164
00:50:44,530 --> 00:50:46,119
there's no artificial barriers

1165
00:50:46,119 --> 00:50:48,490
separating tools programmers from any

1166
00:50:48,490 --> 00:50:51,460
programmers anyone can go in and do

1167
00:50:51,460 --> 00:50:53,589
anything pretty much which I wish I

1168
00:50:53,589 --> 00:50:56,560
liked a lot the cons of doing things

1169
00:50:56,560 --> 00:50:59,589
this way building your own framework you

1170
00:50:59,589 --> 00:51:01,690
have to start from scratch like we

1171
00:51:01,690 --> 00:51:03,430
started with nothing and then we

1172
00:51:03,430 --> 00:51:05,589
implement the drawing primitives so

1173
00:51:05,589 --> 00:51:07,300
that's really starting from scratch

1174
00:51:07,300 --> 00:51:10,480
I would say that's about six months of

1175
00:51:10,480 --> 00:51:12,100
work or something before before you're

1176
00:51:12,100 --> 00:51:13,990
up and running with like a UI that you

1177
00:51:13,990 --> 00:51:16,480
can actually use but we found that that

1178
00:51:16,480 --> 00:51:19,660
initial cost is soon recuperated just in

1179
00:51:19,660 --> 00:51:22,450
how much time saving we have from not

1180
00:51:22,450 --> 00:51:24,580
dealing having to deal with wrestling

1181
00:51:24,580 --> 00:51:26,170
with the framework like wrestling with a

1182
00:51:26,170 --> 00:51:28,300
external framework and trying to force

1183
00:51:28,300 --> 00:51:30,370
it to do what you do at what you needed

1184
00:51:30,370 --> 00:51:32,680
to do you could start with an existing

1185
00:51:32,680 --> 00:51:35,530
immediate mode UI like they're there in

1186
00:51:35,530 --> 00:51:38,410
GUI for example that would be a way of

1187
00:51:38,410 --> 00:51:40,600
getting started way quicker that might

1188
00:51:40,600 --> 00:51:42,190
might be a good choice for you depending

1189
00:51:42,190 --> 00:51:44,580
on what your situation looks like

1190
00:51:44,580 --> 00:51:47,650
another con that you might not think

1191
00:51:47,650 --> 00:51:50,440
about is that I have doing things your

1192
00:51:50,440 --> 00:51:52,540
own like implementing everything your

1193
00:51:52,540 --> 00:51:54,850
own framework actually requires a lot of

1194
00:51:54,850 --> 00:51:56,710
design decisions when you use an

1195
00:51:56,710 --> 00:51:58,570
existing framework everything is sort of

1196
00:51:58,570 --> 00:52:00,460
decided for you you have a checkbox and

1197
00:52:00,460 --> 00:52:02,770
it works the way it should work whereas

1198
00:52:02,770 --> 00:52:04,510
when you write everything yourself you

1199
00:52:04,510 --> 00:52:05,680
kind of have to sit down and think well

1200
00:52:05,680 --> 00:52:09,190
how do I want a checkbox to work how

1201
00:52:09,190 --> 00:52:12,100
does it make sense for a menu to work

1202
00:52:12,100 --> 00:52:14,590
and so on you have to make all these

1203
00:52:14,590 --> 00:52:17,050
design decisions which depending on

1204
00:52:17,050 --> 00:52:19,540
whether that's something you're

1205
00:52:19,540 --> 00:52:21,430
attracted to doing or not attractive

1206
00:52:21,430 --> 00:52:22,930
doing that might not be the right

1207
00:52:22,930 --> 00:52:25,330
decision for you but you should be aware

1208
00:52:25,330 --> 00:52:27,780
of that there's a fair amount of

1209
00:52:27,780 --> 00:52:30,040
thinking and work that goes into that

1210
00:52:30,040 --> 00:52:33,760
and also as I said it kind of requires

1211
00:52:33,760 --> 00:52:35,980
to rewrite rewire your brain a lot to

1212
00:52:35,980 --> 00:52:38,740
think about UI this way to do immediate

1213
00:52:38,740 --> 00:52:43,680
mode so the final thing we're doing here

1214
00:52:43,680 --> 00:52:48,190
generating you eyes as I said before the

1215
00:52:48,190 --> 00:52:50,110
idea here is we want to reduce the work

1216
00:52:50,110 --> 00:52:52,660
we don't want to create you guys for

1217
00:52:52,660 --> 00:52:54,790
everything we want to try that

1218
00:52:54,790 --> 00:52:57,460
automatically somehow a typical example

1219
00:52:57,460 --> 00:52:59,590
of that is a properties panels and I

1220
00:52:59,590 --> 00:53:02,910
think this is something that a lot of

1221
00:53:02,910 --> 00:53:06,550
editors would do they would drive their

1222
00:53:06,550 --> 00:53:08,740
property panel they would they wouldn't

1223
00:53:08,740 --> 00:53:10,300
implement it for each object it would

1224
00:53:10,300 --> 00:53:12,580
sort of drive it from data and and

1225
00:53:12,580 --> 00:53:14,710
that's what we do and we use a property

1226
00:53:14,710 --> 00:53:16,240
panel as sort of our default object

1227
00:53:16,240 --> 00:53:19,780
editor and the way it works is that we

1228
00:53:19,780 --> 00:53:20,950
loop over all

1229
00:53:20,950 --> 00:53:23,980
properties of an object and we draw an

1230
00:53:23,980 --> 00:53:25,720
appropriate control for each of these

1231
00:53:25,720 --> 00:53:28,660
properties so for boolean might be a

1232
00:53:28,660 --> 00:53:30,790
checkbox for a string it might be a text

1233
00:53:30,790 --> 00:53:34,510
box and so on and now using the default

1234
00:53:34,510 --> 00:53:36,040
control might not work for everything

1235
00:53:36,040 --> 00:53:38,410
for example things like color you might

1236
00:53:38,410 --> 00:53:41,070
want to have a custom control for that

1237
00:53:41,070 --> 00:53:44,829
so how do we do that and we get the we

1238
00:53:44,829 --> 00:53:46,780
get all these properties from the truth

1239
00:53:46,780 --> 00:53:48,730
by the way since we have a standard data

1240
00:53:48,730 --> 00:53:52,119
model for that so to handle custom

1241
00:53:52,119 --> 00:53:53,740
properties we use the system that we

1242
00:53:53,740 --> 00:53:56,710
called aspects and basically it's just a

1243
00:53:56,710 --> 00:53:58,990
callback a function callback identified

1244
00:53:58,990 --> 00:54:05,079
by an ID so each system can define an

1245
00:54:05,079 --> 00:54:08,410
aspect like this so the property the

1246
00:54:08,410 --> 00:54:10,530
property tab has defined a callback

1247
00:54:10,530 --> 00:54:13,510
that's identified by an aspect called

1248
00:54:13,510 --> 00:54:17,109
aspect custom properties so we can if we

1249
00:54:17,109 --> 00:54:19,270
want an object in the truth to be drawn

1250
00:54:19,270 --> 00:54:21,280
in a special way in the property panel

1251
00:54:21,280 --> 00:54:23,770
all it has to do is to implement this

1252
00:54:23,770 --> 00:54:27,339
aspect and then when we go through all

1253
00:54:27,339 --> 00:54:28,990
the objects here we check them all does

1254
00:54:28,990 --> 00:54:31,240
this object have a special aspect for

1255
00:54:31,240 --> 00:54:32,890
interacting with the property panel and

1256
00:54:32,890 --> 00:54:35,109
if it does that aspect will be called

1257
00:54:35,109 --> 00:54:36,579
and if it doesn't it will get the

1258
00:54:36,579 --> 00:54:40,060
default panel so this is an example of

1259
00:54:40,060 --> 00:54:42,040
that for a vector3

1260
00:54:42,040 --> 00:54:44,140
again I won't go through the code it's

1261
00:54:44,140 --> 00:54:46,900
just showing that it's pretty easy to to

1262
00:54:46,900 --> 00:54:49,270
do this and the nice thing about this is

1263
00:54:49,270 --> 00:54:52,540
that every control every everything gets

1264
00:54:52,540 --> 00:54:55,869
a UI by default because we map the

1265
00:54:55,869 --> 00:54:58,329
standard controls to the UI but then you

1266
00:54:58,329 --> 00:54:59,650
can go in and customize it with a

1267
00:54:59,650 --> 00:55:01,829
special control if you really need to

1268
00:55:01,829 --> 00:55:04,630
but we take this this approach of using

1269
00:55:04,630 --> 00:55:07,210
generated UI is even further not it's

1270
00:55:07,210 --> 00:55:09,430
not just for properties we use it for

1271
00:55:09,430 --> 00:55:12,670
previews for instance so this is

1272
00:55:12,670 --> 00:55:14,859
controlled by an aspect again so any

1273
00:55:14,859 --> 00:55:16,720
object that want to be able to be

1274
00:55:16,720 --> 00:55:19,630
previewed just adds a preview aspect to

1275
00:55:19,630 --> 00:55:21,880
the object type in the truth and then

1276
00:55:21,880 --> 00:55:23,619
that preview aspect takes care of

1277
00:55:23,619 --> 00:55:25,329
drawing the object in this preview

1278
00:55:25,329 --> 00:55:27,970
window spawning entity is drawing UI

1279
00:55:27,970 --> 00:55:29,920
playing sounds and so on whatever is

1280
00:55:29,920 --> 00:55:34,060
needed to preview that kind of object we

1281
00:55:34,060 --> 00:55:34,870
use the same thing

1282
00:55:34,870 --> 00:55:38,740
or trees so by default here we would

1283
00:55:38,740 --> 00:55:40,540
render by default to render a tree view

1284
00:55:40,540 --> 00:55:41,890
of an object we would just render all

1285
00:55:41,890 --> 00:55:44,620
sub only access children but if an orbit

1286
00:55:44,620 --> 00:55:47,140
was customized that it can int it can

1287
00:55:47,140 --> 00:55:48,880
implement the tree view aspect and do

1288
00:55:48,880 --> 00:55:52,240
its own custom tree drawing so here's an

1289
00:55:52,240 --> 00:55:55,710
example of a full UI using all of this

1290
00:55:55,710 --> 00:55:58,450
so this is our animation state machine

1291
00:55:58,450 --> 00:56:00,580
editor as you can see there's a lot of

1292
00:56:00,580 --> 00:56:03,160
pieces of UI here but all these pieces

1293
00:56:03,160 --> 00:56:05,470
are actually standardized so we have a

1294
00:56:05,470 --> 00:56:07,360
tree view here that's our standardized

1295
00:56:07,360 --> 00:56:08,680
tree view control we didn't implement

1296
00:56:08,680 --> 00:56:12,000
anything special for the state machine

1297
00:56:12,000 --> 00:56:15,490
we have a graph view that's our standard

1298
00:56:15,490 --> 00:56:18,430
graph view control and the state machine

1299
00:56:18,430 --> 00:56:21,190
is just implementing an aspect of it to

1300
00:56:21,190 --> 00:56:23,710
define how its objects get represented

1301
00:56:23,710 --> 00:56:25,810
in this graph view same with the

1302
00:56:25,810 --> 00:56:27,460
property substantive properties control

1303
00:56:27,460 --> 00:56:30,160
and we have a preview control here which

1304
00:56:30,160 --> 00:56:32,440
is our standard preview window as I

1305
00:56:32,440 --> 00:56:34,480
mentioned earlier so this way we can put

1306
00:56:34,480 --> 00:56:37,000
together a really complex UI by just

1307
00:56:37,000 --> 00:56:39,880
reusing all these different parts which

1308
00:56:39,880 --> 00:56:44,920
is really nice so conclusion here I

1309
00:56:44,920 --> 00:56:48,130
would say that creating UIs in this way

1310
00:56:48,130 --> 00:56:50,980
in this system feels a lot faster we no

1311
00:56:50,980 --> 00:56:53,410
longer feel blocked by UI tasks and in

1312
00:56:53,410 --> 00:56:55,420
fact we could build our entire engine

1313
00:56:55,420 --> 00:56:57,450
with the UI with editor and everything

1314
00:56:57,450 --> 00:57:00,970
by two people in two years which i think

1315
00:57:00,970 --> 00:57:05,280
is really good our data model it's

1316
00:57:05,280 --> 00:57:07,750
awesome to get all this stuff for free

1317
00:57:07,750 --> 00:57:09,700
but it's also a little bit scary how

1318
00:57:09,700 --> 00:57:11,290
it's a central piece of technology

1319
00:57:11,290 --> 00:57:13,480
that's kind of complex and it's getting

1320
00:57:13,480 --> 00:57:15,430
more complex with every piece of

1321
00:57:15,430 --> 00:57:17,290
functionality that gets added to it I

1322
00:57:17,290 --> 00:57:19,690
think using aspects the way we are it's

1323
00:57:19,690 --> 00:57:21,370
a really great way of customizing object

1324
00:57:21,370 --> 00:57:24,690
behavior and I definitely recommend that

1325
00:57:24,690 --> 00:57:27,640
implementing things yourself is a lot of

1326
00:57:27,640 --> 00:57:30,940
work functional design as I said but I

1327
00:57:30,940 --> 00:57:33,760
think the payoff payoff is great not

1328
00:57:33,760 --> 00:57:35,740
being dependent of frameworks being able

1329
00:57:35,740 --> 00:57:37,570
to debug and profile everything and

1330
00:57:37,570 --> 00:57:40,630
being in control I would say that we're

1331
00:57:40,630 --> 00:57:42,280
missing some features that you would

1332
00:57:42,280 --> 00:57:44,560
find in a full fledge toolkit we don't

1333
00:57:44,560 --> 00:57:46,690
have supported for right-to-left text

1334
00:57:46,690 --> 00:57:47,970
for instance for

1335
00:57:47,970 --> 00:57:52,140
localization but I don't worry so much

1336
00:57:52,140 --> 00:57:54,990
that we don't have a ton of features as

1337
00:57:54,990 --> 00:57:57,680
long as these features would be would be

1338
00:57:57,680 --> 00:58:01,560
easy to add when we need them so at the

1339
00:58:01,560 --> 00:58:03,300
point where we start needing this I'm

1340
00:58:03,300 --> 00:58:05,609
pretty sure we could implement it easily

1341
00:58:05,609 --> 00:58:06,900
that's the whole point the keys to

1342
00:58:06,900 --> 00:58:09,030
keeping things simple and being agile

1343
00:58:09,030 --> 00:58:11,040
and I think there's a danger of having

1344
00:58:11,040 --> 00:58:14,820
lots of features but having a complex

1345
00:58:14,820 --> 00:58:16,800
system that is so complex that you don't

1346
00:58:16,800 --> 00:58:18,980
actually have time to use these features

1347
00:58:18,980 --> 00:58:23,760
as an example in stingray we decide we

1348
00:58:23,760 --> 00:58:25,590
use the web technology and stuff to be

1349
00:58:25,590 --> 00:58:26,640
platform-independent

1350
00:58:26,640 --> 00:58:28,410
but they never had time to support any

1351
00:58:28,410 --> 00:58:33,000
other platform than Windows and we had

1352
00:58:33,000 --> 00:58:35,040
right-to-left text that we needed but we

1353
00:58:35,040 --> 00:58:36,510
never had time to really start on

1354
00:58:36,510 --> 00:58:39,660
localization of the editor at all so I

1355
00:58:39,660 --> 00:58:43,380
think like you have to be really careful

1356
00:58:43,380 --> 00:58:45,599
about how you're spending your time and

1357
00:58:45,599 --> 00:58:48,300
it's more important to be simple and to

1358
00:58:48,300 --> 00:58:51,210
be agile than to have features that

1359
00:58:51,210 --> 00:58:53,760
you're not using yet and all in all

1360
00:58:53,760 --> 00:58:55,940
we're really super happy with the way

1361
00:58:55,940 --> 00:58:58,170
things are going and the speed with

1362
00:58:58,170 --> 00:59:00,359
which we've been able to develop you

1363
00:59:00,359 --> 00:59:03,240
guys and it feels fun to make tools and

1364
00:59:03,240 --> 00:59:05,220
you guys for the onion which it didn't

1365
00:59:05,220 --> 00:59:07,589
really do before and I'm really pleased

1366
00:59:07,589 --> 00:59:11,460
and happy with that so this would be the

1367
00:59:11,460 --> 00:59:13,290
time where I would ask for questions I

1368
00:59:13,290 --> 00:59:16,349
can't really do that now since we're in

1369
00:59:16,349 --> 00:59:20,160
lockdown mode but if you have any

1370
00:59:20,160 --> 00:59:23,520
questions tweet me and my Twitter handle

1371
00:59:23,520 --> 00:59:26,400
there we have a podcast and our

1372
00:59:26,400 --> 00:59:28,080
machinery podcasts that I recommend you

1373
00:59:28,080 --> 00:59:29,849
can listen to if you want to find out

1374
00:59:29,849 --> 00:59:31,980
more stuff that we're doing we also have

1375
00:59:31,980 --> 00:59:33,810
a blog available at our website

1376
00:59:33,810 --> 00:59:36,630
our machinery calm and feel happy to

1377
00:59:36,630 --> 00:59:39,300
read that and contact us if you're

1378
00:59:39,300 --> 00:59:41,540
interested in looking at the onion or

1379
00:59:41,540 --> 00:59:44,660
using it

